#!/usr/bin/python
"""
Get rule updates
"""
import getopt
import json
import os
import re
import sys
import shutil
import subprocess
import tarfile
import urllib2

import uvm
from uvm import Manager
from uvm import AppManager
from uvm import Uvm

UNTANGLE_DIR = '%s/usr/lib/python%d.%d' % ( "@PREFIX@", sys.version_info[0], sys.version_info[1] )
if ( "@PREFIX@" != ''):
    sys.path.insert(0, UNTANGLE_DIR)

import intrusion_prevention

DEBUG = False
CHUNK_SIZE = 1024 * 1024
FORCE_SYNC = False

class Update:
    """
    Update
    """
    DEBUG = False
    errors = []
    settings_file_name_regex = re.compile(r'^settings_(\d+).js$')

    def __init__(self, base_directory, url):
        self.debug = DEBUG
        self.base_directory = base_directory
        self.working_directory = self.base_directory + "/update"
        self.rules_working_directory = self.working_directory + "/new"
        self.url = url
        self.rules_file_name = self.url.split( "/" )[-1].split("?")[0]
        self.url_file_name = self.working_directory + "/" + self.rules_file_name
        self.live_rules_file_name = self.base_directory + "/" + self.rules_file_name
        self.app_ids = []
        self.app_manager = None

    def setup(self):
        """
        Setup working directory
        """
        if self.debug == True:
            print(":".join( [self.__class__.__name__ , sys._getframe().f_code.co_name, "cleanup and create work directories" ] ))
            
        if os.path.isdir( self.working_directory ) == True:
            try:
                shutil.rmtree( self.working_directory )
            except:
                self.errors.append( {
			        'msg': "Cannot remove existing working directory=" + self.working_directory,
			        'error': "\n".join( str(v) for v in sys.exc_info() )
		        })
                return False
            
        try:
            os.makedirs( self.working_directory )
        except:
            self.errors.append( {
                'msg': "Cannot create working directory=" + self.working_directory,
                'error': "\n".join( str(v) for v in sys.exc_info() )
            })
            return False

        uvmContext = Uvm().getUvmContext( hostname="localhost", username=None, password=None, timeout=60 )
        self.app_manager = uvmContext.appManager()

        ##
        ## Easier to parse the api for instances than reproducing what 
        ## it does with object.
        ##
        nm = AppManager(uvmContext)
        for instance in nm.get_instances():
            if instance[1] == "intrusion-prevention" and ( instance[3] == "RUNNING" or FORCE_SYNC):
                self.app_ids.append(instance[0])
        
        return True

    def download(self):
        """
        Download
        """
        if self.debug == True:
            print(":".join( [self.__class__.__name__ , sys._getframe().f_code.co_name, "get rule set" ] ))

        ## Get file size to determine if we need to download
        if os.path.isfile( self.live_rules_file_name  ) == True:
            live_rules_file_size = os.path.getsize( self.live_rules_file_name )
        else:
            live_rules_file_size = 0

        try:
            r = urllib2.Request(self.url)
            r.get_method = lambda: 'HEAD'
            response = urllib2.urlopen(r)
            meta = response.info()
            headers = meta.getheaders( "Content-length" )
        except:
            self.errors.append( {
                'msg': "Cannot open url=" + self.url,
                'error': "\n".join( str(v) for v in sys.exc_info() )
            })
            return False

        url_file_size = int( headers[0] )
        if url_file_size == 0:
            self.errors.append( {
                'msg': "Content length",
                'error': "Content length is 0"
            })
            return False

        if live_rules_file_size == url_file_size:
            if self.debug:
                print(":".join( [self.__class__.__name__ , sys._getframe().f_code.co_name, "live and url sizes are the same=" + str( live_rules_file_size ) ] ))
            return False

        try:
            url = urllib2.urlopen( self.url )
        except:
            self.errors.append( {
		        'msg': "Cannot open url=" + self.url,
			    'error': "\n".join( str(v) for v in sys.exc_info() )
            })
            return False
        
        try:
            write_file = open( self.url_file_name, 'wb' )
        except:
            self.errors.append( {
		        'msg': "Cannot create url_file_name=" + url_file_name,
			    'error': "\n".join( str(v) for v in sys.exc_info() )
            })
            return False
        
        url_bytes_read = 0
        while url_bytes_read < url_file_size:
            try:
                data = url.read( CHUNK_SIZE )
            except:
                self.errors.append( {
		            'msg': "Cannot read content at " + str( url_bytes_read ),
			        'error': "\n".join( str(v) for v in sys.exc_info() )
                })
                return False

            url_bytes_read += len(data)

            try:
                write_file.write(data)
            except:
                self.errors.append( {
		            'msg': "Cannot write content at " + str( url_bytes_read ),
			        'error': "\n".join( str(v) for v in sys.exc_info() )
                })
                return False
        write_file.close()
        return True

    def validate(self):
        """
        Validate
        """
        if self.debug == True:
            print(":".join( [self.__class__.__name__ , sys._getframe().f_code.co_name, "extract rules" ] ))
            
        try:
            tar = tarfile.open( self.url_file_name )
            tar.extractall( path = self.rules_working_directory )
            tar.close()
        except:
            self.errors.append( {
                'msg': "Unable to extract downloaded file=" + self.url_file_name + " to rules working directory=" + self.rules_working_directory,
                'error': "\n".join( str(v) for v in sys.exc_info() )
            })
            return False
        
        return True
    
    def install(self):
        """
        Install to live
        """
        if self.debug == True:
            print(":".join( [self.__class__.__name__ , sys._getframe().f_code.co_name, "move to live" ] ))
            
        live_new_directory =  self.base_directory + "/new"
        live_previous_directory =  self.base_directory + "/previous"
        live_current_directory =  self.base_directory + "/current"
            
        ## Copy to live directory as "new"
        if os.path.isdir( live_new_directory ) == True:
            try:
                shutil.rmtree( live_new_directory )
            except:
                self.errors.append( {
			        'msg': "Cannot remove existing live new directory=" + live_new_directory,
			        'error': "\n".join( str(v) for v in sys.exc_info() )
		        })
                return False
            
        try:
            shutil.copytree( self.rules_working_directory, live_new_directory )
        except:
            self.errors.append( {
                'msg': "Unable to copy tree from working directory " + self.rules_working_directory + " to live directory " + live_new_directory,
                'error': "\n".join( str(v) for v in sys.exc_info() )
            })
            return False
        
        ## remove previous
        if os.path.isdir( live_previous_directory ) == True:
            try:
                shutil.rmtree( live_previous_directory )
            except:
                self.errors.append( {
			        'msg': "Cannot remove existing live previous directory=" + live_previous_directory,
			        'error': "\n".join( str(v) for v in sys.exc_info() )
		        })
                return False
        
        ## rename current to previous
        if os.path.isdir( live_current_directory ) == True:
            try:
                shutil.move( live_current_directory, live_previous_directory )
            except:
                self.errors.append( {
			        'msg': "Cannot rename existing current directory " + live_current_directory + " to previous " + live_previous_directory,
			        'error': "\n".join( str(v) for v in sys.exc_info() )
		        })
                return False
            
        ## rename current.new to current
        try:
            shutil.move( live_new_directory, live_current_directory )
        except:
            self.errors.append( {
                'msg': "Cannot rename existing new directory " + live_new_directory + " to currret " + live_current_directory,
                'error': "\n".join( str(v) for v in sys.exc_info() )
            })
            return False

        # move tarball to live
        if os.path.isfile( self.live_rules_file_name ) == True:
            try:
                os.remove( self.live_rules_file_name )
            except:
                self.errors.append( {
			        'msg': "Cannot remove existing live rules file=" + self.live_rules_file_name,
			        'error': "\n".join( str(v) for v in sys.exc_info() )
		        })
                return False
        
        try:
            shutil.copyfile( self.url_file_name, self.live_rules_file_name )
        except:
            self.errors.append( {
                'msg': "Cannot copy new rules file " + self.url_file_name + " to live " + self.live_rules_file_name,
                'error': "\n".join( str(v) for v in sys.exc_info() )
            })
            return False
        
        return True

    def synchronize(self):
        """
        Synchronize configuration
        """
        for app_id in self.app_ids:
            app = self.app_manager.app(app_id)

            temp_settings_file_name = "/tmp/" + str(app_id) + ".js"
            ## Syncronize
            args = [
                "@PREFIX@/usr/share/untangle/bin/intrusion-prevention-sync-settings.py",
                "--app_id", str(app_id),
                "--previous_rules", "/usr/share/untangle-snort-config/previous",
                "--rules", "/usr/share/untangle-snort-config/current",
                "--settings", temp_settings_file_name,
                "--status", "/usr/share/untangle-snort-config/last-update.js"
            ]
            try: 
                process = subprocess.Popen( args )
                result = process.wait()
            except:
                self.errors.append( {
                    'msg': "Unable to run sync script with arguments = " + ",".join(args),
                    'error': "\n".join( str(v) for v in sys.exc_info() )
                })
                return False
            
            if result == 0:
                app.saveSettings( temp_settings_file_name )
                app.setUpdatedSettingsFlag( True )
                try:
                    app.reconfigure()
                except:
                    # This may time out on slow machines, continue on
                    pass
        return True

def usage():
    """
    Usage
    """
    print("usage")
    print("help\t\tusage")
    print("rules_template_directory\t\tSnort rule template directory")
        
def main(argv):
    """
    Main
    """
    global DEBUG
    global FORCE_SYNC
    rules_template_directory = "/usr/share/untangle-snort-config"
    url = "https://ids.untangle.com/snortrules.tar.gz"
    update_ran_file_name = "/tmp/intrusion-prevention-update.ran"
    force_download = False
	
    try:
        opts, args = getopt.getopt(argv, "hru:d", ["help", "rules_template_directory=", "url=", "force_sync", "debug", "force_download"] )
    except getopt.GetoptError:
        usage()
        sys.exit(2)
        
    for opt, arg in opts:
        if opt in ( "-h", "--help"):
            usage()
            sys.exit()
        elif opt in ( "-d", "--debug"):
            DEBUG = True
        elif opt in ( "-s", "--force_sync"):
            FORCE_SYNC = True
        elif opt in ( "-s", "--force_download"):
            force_download = True
        elif opt in ( "-r", "--rules_template_directory"):
            rules_template_directory = arg
        elif opt in ( "-u", "--url"):
            url = arg

    if DEBUG == True:
        print("rules_template_directory = " + rules_template_directory)
        print("url = " + url)

    update = Update( rules_template_directory, url )
    update.setup()
    if FORCE_SYNC is True:
        update.synchronize()
    else:
        if ( force_download or len(update.app_ids) > 0 ) and update.download() == True and update.validate() and update.install():
            update.synchronize()

    """
    Always update last updated time even if nothing was downloaded 
    (snort rules aren't updated every day)
    Otherwise customers will call to complain.
    """
    if os.path.exists(update_ran_file_name):
        os.utime(update_ran_file_name,None)
    else:
        th = open(update_ran_file_name, "a" )
        th.close()

    if len( update.errors ):
        print(update.errors)
    sys.exit()

if __name__ == "__main__":
    main( sys.argv[1:] )
