#!/bin/dash

#
# Snort rules are on two tables, mangle and raw for the following reasons:
#
# - We want to only process the first max_scan_size bytes.  Connection tracking setup doesn't happen until after raw so
#   it must be doen in mangle.
# - Parallel DNS queries get "messed up" by nfqueue (http://www.spinics.net/lists/netfilter-devel/msg15860.html) in mangle.
#   They work fine in raw.
#
# So:
# - mangle: nfqueue everything but UDP/domain.
# - raw: nfqueue only UDP/domain
#
# As much as we'd like to use a single table, it's just not possible at this time.
# Let's keep checking with new Debian releases though!
#

IPTABLES=${IPTABLES:-iptables}
TABLE_NAME_MANGLE=mangle
TABLE_NAME_RAW=raw
CHAIN_NAME=snort-scanning
SNORT_QUEUE_NUM=2930
SNORT_MAX_SCAN_SIZE=$(python -c "from uvm.settings_reader import get_app_settings_item; print get_app_settings_item('intrusion-prevention','max_scan_size');")
if [ -z "${SNORT_MAX_SCAN_SIZE}" -o "${SNORT_MAX_SCAN_SIZE}" = "None" ] ; then
    SNORT_MAX_SCAN_SIZE=1024
fi

#
# See if snort is running.
#
is_queue_open()
{
    local t_snort_pid
    local t_queue_pid

    t_snort_pid="invalid"

    if [ ! -f /proc/net/netfilter/nfnetlink_queue ]; then
        echo "[`date`] The netfilter nfnetlink_queue does not exist - not inserting rules for snort"
        return 1
    fi

    t_queue_portid=`awk -v queue=${SNORT_QUEUE_NUM} '{ if ( $1 == queue ) print $2 }' /proc/net/netfilter/nfnetlink_queue`

    if [ -z "${t_queue_portid}" ]; then
        echo "[`date`] The snort netfilter queue is not open - not inserting rules for snort"
        return 1
    fi
   
    return 0
}

#
# Create chains, remove rules that go to them.
#
flush_snort_iptables_rules()
{
    # mangle: Create and flush a new chain for our traffic
    ${IPTABLES} -t ${TABLE_NAME_MANGLE} -N ${CHAIN_NAME} >/dev/null 2>&1
    ${IPTABLES} -t ${TABLE_NAME_MANGLE} -F ${CHAIN_NAME}

    # mangle: Remove previous rule to call the chain if it exists.
    ${IPTABLES} -t ${TABLE_NAME_MANGLE} -D PREROUTING -j ${CHAIN_NAME} -m comment --comment "snort scanning" >/dev/null 2>&1

    # raw: Create and flush a new chain for our traffic
    ${IPTABLES} -t ${TABLE_NAME_RAW} -N ${CHAIN_NAME} >/dev/null 2>&1
    ${IPTABLES} -t ${TABLE_NAME_RAW} -F ${CHAIN_NAME}

    # raw: Remove previous rule to call the chain if it exists.
    ${IPTABLES} -t ${TABLE_NAME_RAW} -D PREROUTING -j ${CHAIN_NAME} -m comment --comment "snort scanning" >/dev/null 2>&1
}

#
# Add rules to chains and rules to call chains
#
insert_snort_iptables_rules()
{
    # mangle: We don't care about traffic to or from loopback addresses
    ${IPTABLES} -t ${TABLE_NAME_MANGLE} -A ${CHAIN_NAME} -s 127.0.0.0/8 -j RETURN -m comment --comment "Bypass loopback traffic"
    ${IPTABLES} -t ${TABLE_NAME_MANGLE} -A ${CHAIN_NAME} -d 127.0.0.0/8 -j RETURN -m comment --comment "Bypass loopback traffic"

    # mangle: We also don't want to look at any bypassed traffic
    ${IPTABLES} -t ${TABLE_NAME_MANGLE} -A ${CHAIN_NAME} -m mark --mark 0x1000000/0x1000000 -j RETURN -m comment --comment "Ignore bypassed traffic"

    # mangle: Ignore UDP/domain traffic
    ${IPTABLES} -t ${TABLE_NAME_MANGLE} -A ${CHAIN_NAME} -p udp --dport 53 -j RETURN -m comment --comment "Ignore UDP/domain traffic"

    # mangle: special hook to allow bypass of a development machine or network
    if [ ! -z ${SNORT_DEV_NETWORK} ]; then
        ${IPTABLES} -t ${TABLE_NAME_MANGLE} -A ${CHAIN_NAME} -s ${SNORT_DEV_NETWORK} -j RETURN
        ${IPTABLES} -t ${TABLE_NAME_MANGLE} -A ${CHAIN_NAME} -d ${SNORT_DEV_NETWORK} -j RETURN
    fi

    # mangle: all other traffic will be handed off to our netfilter queue
    ${IPTABLES} -t ${TABLE_NAME_MANGLE} -A ${CHAIN_NAME} -j NFQUEUE --queue-num ${SNORT_QUEUE_NUM} --queue-bypass -m connbytes --connbytes 0:${SNORT_MAX_SCAN_SIZE} --connbytes-dir both --connbytes-mode bytes -m comment --comment "queue for snort"

    # mangle: ----- now that we have created our table we need some rules to send us traffic
    # mangle: ----- these next rules will grab only traffic that we need to classify

    ${IPTABLES} -t ${TABLE_NAME_MANGLE} -A PREROUTING -j ${CHAIN_NAME} -m comment --comment "snort scanning" 2>/dev/null

    # raw: we don't care about traffic to or from loopback addresses
    ${IPTABLES} -t ${TABLE_NAME_RAW} -A ${CHAIN_NAME} -s 127.0.0.0/8 -j RETURN -m comment --comment "Bypass loopback traffic"
    ${IPTABLES} -t ${TABLE_NAME_RAW} -A ${CHAIN_NAME} -d 127.0.0.0/8 -j RETURN -m comment --comment "Bypass loopback traffic"

    # raw: we also don't want to look at any bypassed traffic
    ${IPTABLES} -t ${TABLE_NAME_RAW} -A ${CHAIN_NAME} -m mark --mark 0x1000000/0x1000000 -j RETURN -m comment --comment "Ignore bypassed traffic"

    # raw: special hook to allow bypass of a development machine or network
    if [ ! -z ${SNORT_DEV_NETWORK} ]; then
        ${IPTABLES} -t ${TABLE_NAME_RAW} -A ${CHAIN_NAME} -s ${SNORT_DEV_NETWORK} -j RETURN
        ${IPTABLES} -t ${TABLE_NAME_RAW} -A ${CHAIN_NAME} -d ${SNORT_DEV_NETWORK} -j RETURN
    fi

    # raw: Only had off UDP/domain  traffic to our netfilter queue
    ${IPTABLES} -t ${TABLE_NAME_RAW} -A ${CHAIN_NAME} -p udp --dport 53 -j NFQUEUE --queue-num ${SNORT_QUEUE_NUM} --queue-bypass -m comment --comment "queue only UDP/domain for snort"

    # mangle: ----- now that we have created our table we need some rules to send us traffic
    # mangle: ----- these next rules will grab only traffic that we need to classify

    ${IPTABLES} -t ${TABLE_NAME_RAW} -A PREROUTING -j ${CHAIN_NAME} -m comment --comment "snort scanning" 2>/dev/null

    return 0
}

## Start of script
if [ -f /etc/default/untangle-snort ]; then
    . /etc/default/untangle-snort
fi

## If the queue is open generate the new rules
flush_snort_iptables_rules

is_queue_open && {
    echo "[`date`] snort is running. Inserting rules."
    insert_snort_iptables_rules
}

true
