#!/bin/dash
#
# Suricata rules are on two tables, mangle and raw for the following reasons:
#
# - We want to only process the first max_scan_size bytes.  Connection tracking setup doesn't happen until after raw so
#   it must be doen in mangle.
# - Parallel DNS queries get "messed up" by nfqueue (http://www.spinics.net/lists/netfilter-devel/msg15860.html) in mangle.
#   They work fine in raw.
#
# So:
# - mangle: nfqueue everything but UDP/domain.
# - raw: nfqueue only UDP/domain
#
# As much as we'd like to use a single table, it's just not possible at this time.
# Let's keep checking with new Debian releases though!
#
IPTABLES=${IPTABLES:-iptables}
TABLE_NAME_MANGLE=mangle
TABLE_NAME_RAW=raw
CHAIN_NAME_SURICATA=suricata-scanning

SETTINGS_INTRUSIONPREVENTION_IPTABLESPROCESSING=
SETTINGS_INTRUSIONPREVENTION_IPTABLESNFQNUMBER=
SETTINGS_INTRUSIONPREVENTION_IPTABLESMAXSCANSIZE=
SETTINGS_INTRUSIONPREVENTION_BYPASSRULES=$(cat << SETTINGS_INTRUSIONPREVENTION_BYPASSRULES_EOF
SETTINGS_INTRUSIONPREVENTION_BYPASSRULES_EOF
)
SETTINGS_NETWORK_BYPASSRULES=$(cat << SETTINGS_NETWORK_BYPASSRULES_EOF
SETTINGS_NETWORK_BYPASSRULES_EOF
)

if [ "x$SETTINGS_INTRUSIONPREVENTION_IPTABLESPROCESSING" = "x" ]; then
    echo "Missing iptablesProcessing!"
    return 0
fi
if [ "x$SETTINGS_INTRUSIONPREVENTION_IPTABLESNFQNUMBER" = "x" ]; then
    echo "Missing iptablesNfqNumber!"
    return 0
fi
if [ "x$SETTINGS_INTRUSIONPREVENTION_IPTABLESMAXSCANSIZE" = "x" ]; then
    echo "Missing iptablesMaxScanSize!"
    return 0
fi

SURICATA_RUNNING=$(ps -e -o command h | cut -f1 -d' ' | grep [s]uricata | wc -l)

CONNBYTES="-m connbytes --connbytes 0:${SETTINGS_INTRUSIONPREVENTION_IPTABLESMAXSCANSIZE} --connbytes-dir both --connbytes-mode bytes"
if [ ${SETTINGS_INTRUSIONPREVENTION_IPTABLESMAXSCANSIZE} -eq 0 ]; then
    CONNBYTES=
fi

#
# See if suricata is running.
#
is_queue_open()
{
    local t_suricata_pid
    local t_queue_pid

    t_suricata_pid="invalid"

    if [ ! -f /proc/net/netfilter/nfnetlink_queue ]; then
        echo "[`date`] The netfilter nfnetlink_queue does not exist - not inserting rules for suricata"
        return 1
    fi

    return 0
}

flush_suricata_table_iptables_table_chain(){
    local table=$1
    local chain=$2

    # Create, flush chain for our traffic
    ${IPTABLES} -t ${table} -N ${CHAIN_NAME_SURICATA} >/dev/null 2>&1
    ${IPTABLES} -t ${table} -F ${CHAIN_NAME_SURICATA}

    # Remove previous rule to call the chain if it exists.
    ${IPTABLES} -t ${table} -D ${chain} -j ${CHAIN_NAME_SURICATA} -m comment --comment "suricata scanning" >/dev/null 2>&1

}

#
# Create chains, remove rules that go to them.
#
flush_suricata_table_iptables()
{
    flush_suricata_table_iptables_table_chain "${TABLE_NAME_MANGLE}" "PREROUTING"
    flush_suricata_table_iptables_table_chain "${TABLE_NAME_RAW}" "PREROUTING"

    flush_suricata_table_iptables_table_chain "${TABLE_NAME_MANGLE}" "POSTROUTING"
    flush_suricata_table_iptables_table_chain "filter" "FORWARD"
}

#
# Add suricata chain to target tabl eand chain.
#
insert_suricata_iptables_table_chain()
{
    local table="$1"
    local chain="$2"

    # We don't care about traffic to or from loopback addresses
    ${IPTABLES} -t ${table} -A ${CHAIN_NAME_SURICATA} -s 127.0.0.0/8 -j RETURN -m comment --comment "Bypass loopback traffic"
    ${IPTABLES} -t ${table} -A ${CHAIN_NAME_SURICATA} -d 127.0.0.0/8 -j RETURN -m comment --comment "Bypass loopback traffic"

    # We also don't want to look at any already bypassed traffic
    ${IPTABLES} -t ${table} -A ${CHAIN_NAME_SURICATA} -m mark --mark 0x1000000/0x1000000 -j RETURN -m comment --comment "Ignore bypassed traffic"

    insert_suricata_iptables_table_chain_rule "$table" "$SETTINGS_INTRUSIONPREVENTION_BYPASSRULES"
    insert_suricata_iptables_table_chain_rule "$table" "$SETTINGS_NETWORK_BYPASSRULES"

    # Ignore UDP/domain traffic
    ${IPTABLES} -t ${table} -A ${CHAIN_NAME_SURICATA} -p udp --dport 53 -j RETURN -m comment --comment "Ignore UDP/domain traffic"

    # mangle: special hook to allow bypass of a development machine or network
    if [ ! -z ${SURICATA_DEV_NETWORK} ]; then
        ${IPTABLES} -t ${table} -A ${CHAIN_NAME_SURICATA} -s ${SURICATA_DEV_NETWORK} -j RETURN
        ${IPTABLES} -t ${table} -A ${CHAIN_NAME_SURICATA} -d ${SURICATA_DEV_NETWORK} -j RETURN
    fi

    # all other traffic will be handed off to our netfilter queue
    ${IPTABLES} -t ${table} -A ${CHAIN_NAME_SURICATA} -j NFQUEUE --queue-num ${SETTINGS_INTRUSIONPREVENTION_IPTABLESNFQNUMBER} --queue-bypass ${CONNBYTES} -m comment --comment "queue for suricata"

    # ----- now that we have created our table we need some rules to send us traffic
    # ----- these next rules will grab only traffic that we need to classify

    ${IPTABLES} -t ${table} -A ${chain} -j ${CHAIN_NAME_SURICATA} -m comment --comment "suricata scanning" 2>/dev/null
}

#
# Add pre-build rules to suricata chain on specified table.
#
insert_suricata_iptables_table_chain_rule()
{
    local table="$1"
    local rules="$2"

    ${IFS+"false"} && unset oldifs || oldifs="$IFS" 
IFS='
'
    for command in $rules; do
        if [ -z "${command##*"-t $table"*}" ] ; then
            if [ -z "${command##*"-A $CHAIN_NAME_SURICATA"*}" ] ; then
                eval " $command"
            fi
        fi
    done
    ${oldifs+"false"} && unset IFS || IFS="$oldifs" 
}

#
# Add rules to chains and rules to call chains
#
insert_suricata_iptables()
{

    if [ "${SETTINGS_INTRUSIONPREVENTION_IPTABLESPROCESSING}" = "pre" ] ; then
        insert_suricata_iptables_table_chain "${TABLE_NAME_MANGLE}" "PREROUTING"
        insert_suricata_iptables_table_chain "${TABLE_NAME_RAW}" "PREROUTING"
    else
        insert_suricata_iptables_table_chain "${TABLE_NAME_MANGLE}" "POSTROUTING"
#        insert_suricata_iptables_table_chain "filter" "FORWARD"
    fi

    return

}

## Start of script
if [ -f /etc/default/untangle-suricata ]; then
    . /etc/default/untangle-suricata
fi

## If the queue is open generate the new rules
flush_suricata_table_iptables

if [ "${SURICATA_RUNNING}" = "0" ]; then
    echo "[`date`] Suricata is not running - not inserting rules for suricata"
else
    is_queue_open && {
        echo "[`date`] suricata is running. Inserting rules."
        insert_suricata_iptables
    }
fi


true
