#!/usr/bin/env python

# Here we use the ipsec statusall command to get info about a specific tunnel.
# We dig through the results to find the bytes_i and bytes_o values, and return
# those to the caller via stdout.  Since the search tokens come after the
# corresponding values, we track the search index so we can look at
# the previous token when we find what we are looking for. We also look for
# the word ESTABLISHED to decide if the tunnel is active or down, and the
# local and remote tokens to find the actual tunnel endpoints.

import subprocess
import sys

if (len(sys.argv) < 2):
    raise Exception("Invalid number of arguments")

status_proc = subprocess.Popen("/usr/sbin/ipsec statusall " + sys.argv[1], stdout=subprocess.PIPE, shell=True)
(status_out,status_err) = status_proc.communicate()

wordlist = status_out.split()
svalue = "down"
lvalue = "unknown"
rvalue = "unknown"
ivalue = "0"
ovalue = "0"
index = 0

for token in wordlist:
    if (token.startswith("ESTABLISHED") == True):
        svalue = "active"

    if (token.startswith("local") == True) and (wordlist[index + 1].find("[") != -1) and (wordlist[index + 1].find("]") != -1):
        lvalue = wordlist[index + 1]
        lvalue = lvalue.lstrip("[")
        lvalue = lvalue.rstrip("]")

    if (token.startswith("remote") == True) and (wordlist[index + 1].find("[") != -1) and (wordlist[index + 1].find("]") != -1):
        rvalue = wordlist[index + 1]
        rvalue = rvalue.lstrip("[")
        rvalue = rvalue.rstrip("]")

    if (token.startswith("bytes_i") == True):
        ivalue = wordlist[index - 1]

    if (token.startswith("bytes_o") == True):
        ovalue = wordlist[index - 1]
	
    index += 1

print "| TUNNEL:%s LOCAL:%s REMOTE:%s STATE:%s IN:%s OUT:%s |" % (sys.argv[1] , lvalue, rvalue, svalue, ivalue , ovalue)
