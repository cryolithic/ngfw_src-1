#
# OpenSSL example configuration file.
# This is mostly being used for generation of certificate requests.
#

# This definition stops the following lines choking if HOME isn't
# defined.
HOME            = .
RANDFILE        = $ENV::HOME/.rnd

# Extra OBJECT IDENTIFIER info:
oid_section     = new_oids

[ new_oids ]

####################################################################
[ ca ]
default_ca  = CA_default        # The default ca section

####################################################################
[ CA_default ]
dir           = @PREFIX@/usr/share/untangle/settings/openvpn  # Where everything is kept
certs         = $dir            # Where the issued certs are kept
crl_dir       = $dir            # Where the issued crl are kept
database      = $dir/index.txt  # database index file.
new_certs_dir = $dir        # default place for new certs.

certificate = $dir/ca.crt     # The CA certificate
serial      = $dir/serial     # The current serial number
crl         = $dir/crl.pem    # The current CRL
private_key = $dir/ca.key     # The private key
RANDFILE    = $dir/.rand      # private random number file

x509_extensions = usr_cert    # The extentions to add to the cert

default_days     = 3650       # how long to certify for
default_crl_days = 30         # how long before next CRL
default_md       = sha512     # which md to use.
preserve         = no         # keep passed DN ordering

# A few difference way of specifying how similar the request should look
# For type CA, the listed attributes must be the same, and the optional
# and supplied fields are just that :-)
policy      = policy_match

# For the CA policy
[ policy_match ]
countryName         = match
stateOrProvinceName = match
organizationName    = match

## Untangle::
## Each time a new CA is generated, a random organization unit
## is assigned globally.  If the user generates new base parameters
## there will be a new value assigned to the organizational unit.
## since this value will not match the old value, the certificates
## are guaranteed to be incompatible with one another.  This is on
## top of the fact that the old CA is no longer used.
organizationalUnitName  = match
commonName              = supplied
emailAddress            = optional
dnQualifier             = optional

####################################################################
[ req ]
prompt              = no
default_bits        = 4096
default_keyfile     = privkey.pem
distinguished_name  = req_distinguished_name_no_prompt
attributes          = req_attributes_no_prompt
x509_extensions     = v3_ca # The extentions to add to the self signed cert
string_mask         = nombstr

[ req_distinguished_name_no_prompt ]
CN          = $ENV::KEY_COMMON_NAME # CN
C           = CO # COUNTRY
ST          = ST # PROVINCE
L           = L  # CITY
O           = O  # ORG
OU          = OU # ORG UNIT
dnQualifier = $ENV::KEY_DN_QUALIFIER  ## a way to distinguish ca, server and client certs in the index file.

[ req_attributes_no_prompt ]

[ usr_cert ]
basicConstraints       = CA:FALSE
nsCertType             = client
nsComment              = "OpenSSL Generated Certificate"
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid,issuer:always

[ server ]
basicConstraints       = CA:FALSE
nsCertType             = server
nsComment              = "OpenSSL Generated Server Certificate"
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid,issuer:always
keyUsage               = nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage       = serverAuth

[ v3_req ]
# Extensions to add to a certificate request
basicConstraints       = CA:FALSE
keyUsage               = nonRepudiation, digitalSignature, keyEncipherment

[ v3_ca ]
basicConstraints       = CA:true
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid:always,issuer:always
