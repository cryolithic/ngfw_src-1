#!/bin/bash

# This script will generate the trusted-ca-list.jks certificate keystore
# that is used by the SSL Inspector as the master list of CA's to be
# trusted.  We start by importing all of the .crt files located in
# the /usr/share/ca-certificates directory, which are included in the
# standard Debian ca-certificates package.
#
# Since ca-certificates is missing a bunch of common certs, we dive deeper
# by including the certs distributed with the Firefox browser.  Mozilla does
# publish a certdata.txt file that supposedly includes all of the approved
# certs, but every version I found was out of date and missing many of the
# certs that are included with the browser.
# 
# Firefox is also missing some common certs, so I scraped the bottom
# of the barrel and manually exported all of the relevant root certificates
# from a generic Windows 10 macine.  This picked up some others that don't
# exist in either of the other stores.
#
# Finally, we still seem to miss some critical intermediates, so I
# manually grabbed an added certs from these locations:
#   https://certs.godaddy.com/repository
#   https://www.entrust.com/get-support/ssl-certificate-support/root-certificate-downloads
#   https://www.amazontrust.com/repository
#   https://letsencrypt.org/certificates
#
# Firefox seems to store the root certs in nssckbi.dll, and I could not
# come up with a way to extract them from there.  The ugly solution I
# came up with is a Firefox extension called Export All Certificates.
# Once installed, a new Export All button is added to this dialog:
# Tools/Options/Advanced/Certificates/View Certificates/Authorities
# It will export all of the certs in DER format to the directory you choose.
# Take all the files it exports, put them somewhere on this machine, and
# then run this script with the directory where you put them.
#
# One other useful tip.  Each certificate in a Java keystore must have a
# unique alias.  We use this to our advantage by using the certificate
# fingerprint as the alias.  This will cause keytool to automatically
# reject any duplicates when it tries to combine the ca-certificates
# with all the other certificates into a single file.  This also means
# we expect to see some duplicate exceptions when this thing runs.

# need these to deal with crazy file names for some certificates
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export LANGUAGE=en_US.UTF-8

# make sure we have the path for the DER certificates
if [ -z "$1" ]
then
  printf "\n  ERROR: Missing path to .cer .der certificates - see comments for info\n\n"
  exit 1
fi

USERPATH=$1
KEYSTORE=/tmp/trusted-ca-list.jks
PASSWORD=password

# make sure the target keystore file does not exist
if [ -f $KEYSTORE ]
then
  printf "\n  ERROR: The target file %s already exists\n\n" $KEYSTORE
  exit 1
fi

GOOD=0
SKIP=0

# -----------------------------------------------------------------------------
# ARG1 = path to search
# ARG2 = extension to find
# ARG3 = file format for openssl
# -----------------------------------------------------------------------------
function process_path
{
IFS=$'\n'
FILELIST=`find $1 -name "$2"`

for FILENAME in $FILELIST
do
  printf "Importing %s\n" "$FILENAME"
  FINGERPRINT=`openssl x509 -inform $3 -noout -in "$FILENAME" -fingerprint`
  ALIAS=`echo $FINGERPRINT | sed 's/SHA1 Fingerprint=//g' | sed 's/://g'`
  keytool -importcert -noprompt -keystore $KEYSTORE -storepass $PASSWORD -alias $ALIAS -file "$FILENAME"
  if (($? > 0)); then
    SKIP=$((SKIP + 1))
  else
    GOOD=$((GOOD + 1))
  fi
done
}
# -----------------------------------------------------------------------------

process_path "/usr/share/ca-certificates" "*.crt" "PEM"
process_path "$USERPATH" "*.der" "DER"
process_path "$USERPATH" "*.crt" "PEM"
process_path "$USERPATH" "*.pem" "PEM"

printf "\nImported %s certificates.  Skipped %s certificates.\n\n" $GOOD $SKIP

exit 0

