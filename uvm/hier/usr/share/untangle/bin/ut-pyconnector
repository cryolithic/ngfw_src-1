#!/usr/bin/env python

import sys
sys.path.insert(0,'@PREFIX@/usr/lib/python%d.%d/' % sys.version_info[:2])
import subprocess
import shlex
import time
import socket
import os
import getopt
import datetime
import random
import signal
import base64
import re
import traceback
import ssl

from uvm import Manager
from uvm import Uvm

UNTANGLE_CMD_PORTS   = [80,443,993,4443,587,995,8080,53,25]
UNTANGLE_CMD_SERVERS = ["cmd.untangle.com", "cmd.metaloft.com"]
RETRY_TIME_LONG = 10
RETRY_TIME_SHORT = 5
CERTS_FILE = '/tmp/pyconnector/certs.pem'

uvm = None
command_socket = None
command_socket_file = None
debug_level = 1

def usage():
     print """\
usage: %s [options]
Options:
  -h | --help                   help - print this message
  -l <log>       | --log=<log>          output to specified log instead of stdout/stderr
  -d <debug_lvl> | --debug-level=<0-2>  debug verbosite level
  -s <server>    | --server=<server>    specify a cmd server
  -p <port>      | --port=<port>        specify a port to connect to cmd
""" % sys.argv[0]

def system(cmd_str):
     args = shlex.split(cmd_str)
     proc = subprocess.Popen(args, stdin=None, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
     (stdout, stderr) = proc.communicate()
     return stdout + stderr

def debug(str, level=1):
     global debug_level
     if level <= debug_level:
          print "%s: %s" % (datetime.datetime.now().strftime("%Y-%m-%d %H:%M"), str)
          sys.stdout.flush()

def write_cert_file():
     global CERTS_FILE
     f = open(CERTS_FILE, 'w')
     f.write('-----BEGIN CERTIFICATE-----\n')
     f.write('MIIDGjCCAoOgAwIBAgIJAJWdC06wNHyNMA0GCSqGSIb3DQEBBQUAMIGlMQswCQYD\n')
     f.write('VQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTESMBAGA1UEBwwJU3Vubnl2YWxl\n')
     f.write('MRQwEgYDVQQKDAtVbnRhbmdsZSBDQTEYMBYGA1UECwwPY2EudW50YW5nbGUuY29t\n')
     f.write('MRgwFgYDVQQDDA9jYS51bnRhbmdsZS5jb20xIzAhBgkqhkiG9w0BCQEWFGRtb3Jy\n')
     f.write('aXNAdW50YW5nbGUuY29tMB4XDTEyMDgwOTIxMzU0NVoXDTIyMDgwNzIxMzU0NVow\n')
     f.write('gaUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRIwEAYDVQQHDAlT\n')
     f.write('dW5ueXZhbGUxFDASBgNVBAoMC1VudGFuZ2xlIENBMRgwFgYDVQQLDA9jYS51bnRh\n')
     f.write('bmdsZS5jb20xGDAWBgNVBAMMD2NhLnVudGFuZ2xlLmNvbTEjMCEGCSqGSIb3DQEJ\n')
     f.write('ARYUZG1vcnJpc0B1bnRhbmdsZS5jb20wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJ\n')
     f.write('AoGBALYepW5elyeiDDHAYC7UMD+3VMj3Wp+X69r+APllVTJBlaNI+rmdmR0IUuRu\n')
     f.write('0P3wpcZm1OooaoUU7q2F2zYbhyqtPB9ULPzNyQ0ys2KvXmauSkmx9He6ysDiWHmD\n')
     f.write('F7MTxhR/I7WI1n6E+7EIpP+CGbDYd2w5nWFzWhhx28936RwPAgMBAAGjUDBOMB0G\n')
     f.write('A1UdDgQWBBQRNxGoQB+2uSfjfxvJp7Uq3zHGADAfBgNVHSMEGDAWgBQRNxGoQB+2\n')
     f.write('uSfjfxvJp7Uq3zHGADAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBBQUAA4GBAJOy\n')
     f.write('tlQvH4BGnrvCalM+8v/UEL/UYDziJmrv6kKW2OVrdp83a2iLLwhkAwBIEAvmgJpD\n')
     f.write('iIYjmzyqkwC3tJOREcN5XKo83AKKxgIB0UWwH6Vo4k6XlxwE8CGfXwl++6/RAmAu\n')
     f.write('KZFJgDBndnYz9thw4TuIjrQriZDPRVcpCz9T/tX3\n')
     f.write('-----END CERTIFICATE-----\n')
     f.write('-----BEGIN CERTIFICATE-----\n')
     f.write('MIICujCCAiMCAQEwDQYJKoZIhvcNAQEFBQAwgaUxCzAJBgNVBAYTAlVTMRMwEQYD\n')
     f.write('VQQIDApDYWxpZm9ybmlhMRIwEAYDVQQHDAlTdW5ueXZhbGUxFDASBgNVBAoMC1Vu\n')
     f.write('dGFuZ2xlIENBMRgwFgYDVQQLDA9jYS51bnRhbmdsZS5jb20xGDAWBgNVBAMMD2Nh\n')
     f.write('LnVudGFuZ2xlLmNvbTEjMCEGCSqGSIb3DQEJARYUZG1vcnJpc0B1bnRhbmdsZS5j\n')
     f.write('b20wHhcNMTIwODA5MjEzNjM5WhcNMjIwODA3MjEzNjM5WjCBpDELMAkGA1UEBhMC\n')
     f.write('VVMxEzARBgNVBAgMCkNhbGlmb3JuaWExEjAQBgNVBAcMCVN1bm55dmFsZTERMA8G\n')
     f.write('A1UECgwIVW50YW5nbGUxGTAXBgNVBAsMEGNtZC51bnRhbmdsZS5jb20xGTAXBgNV\n')
     f.write('BAMMEGNtZC51bnRhbmdsZS5jb20xIzAhBgkqhkiG9w0BCQEWFGRtb3JyaXNAdW50\n')
     f.write('YW5nbGUuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDUeVn2SrWChvlb\n')
     f.write('RjtymxCyH+1QUaS2x34K+7oYxoa5NPs7u85bHpWM7HeFiN3gdZ1Qf+B6wkwa2spG\n')
     f.write('coir2wqp7udrEX5PipnHXVPqtOLExE5yNcwJ5kEmcd0l/LUh1I4Y7mXebqrrSvCE\n')
     f.write('j3P1xQF0mZ/gkFI0xjaFTKr6wYSxwwIDAQABMA0GCSqGSIb3DQEBBQUAA4GBAFne\n')
     f.write('oaoFbMan9WBqnPkCbTdDmMdOMesIBRfr3YIzzbfHtemfX0v+nMdsL8XdFc2dBlhl\n')
     f.write('UP6dCmvX3ZJtF/6O45lq+8tjVbN0PIECSDDNHuppheKoI6STWaD2WCklwLVqItw0\n')
     f.write('0oHL7BzL8/3QuL3xEWsMwAHhF7Mjvs683F9JhZ81\n')
     f.write('-----END CERTIFICATE-----\n')
     f.close()

def connect():
     global command_socket
     global command_socket_file
     global UNTANGLE_CMD_SERVERS
     global UNTANGLE_CMD_PORTS
     if command_socket != None:
          return

     random.shuffle(UNTANGLE_CMD_SERVERS)
     random.shuffle(UNTANGLE_CMD_PORTS)
     debug("Connecting to %s:%i..." % (UNTANGLE_CMD_SERVERS[0],UNTANGLE_CMD_PORTS[0]))

     try:
          write_cert_file()
          command_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

          # turn on keepalive
          command_socket.setsockopt( socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)
          # turn on keepalive after 60 seconds (overrides kernel default in /proc/sys/net/ipv4/tcp_keepalive_time)
          command_socket.setsockopt( socket.SOL_TCP, socket.TCP_KEEPIDLE, 60) 
          # set keepalive interval to 60 seconds (overrides kernel default in /proc/sys/net/ipv4/tcp_keepalive_intvl)
          command_socket.setsockopt( socket.SOL_TCP, socket.TCP_KEEPINTVL, 60) 
          # set keepalive probe count to 2 (overrides kernel default in /proc/sys/net/ipv4/tcp_keepalive_probes)
          command_socket.setsockopt( socket.SOL_TCP, socket.TCP_KEEPCNT, 2) 

          command_socket = ssl.wrap_socket( command_socket, ca_certs=CERTS_FILE, cert_reqs=ssl.CERT_REQUIRED )
          command_socket.connect( ( UNTANGLE_CMD_SERVERS[0], UNTANGLE_CMD_PORTS[0] ) )
     except Exception,e:
          sys.stderr.write("Failed to connect: (%s)\n" % e )
          reset_command_socket()
          return
     # finally:
     #     # rotate the port list to try a new port
     #     UNTANGLE_CMD_SERVERS = UNTANGLE_CMD_SERVERS[1:] + UNTANGLE_CMD_SERVERS[:1]
     #     UNTANGLE_CMD_PORTS   = UNTANGLE_CMD_PORTS[1:]   + UNTANGLE_CMD_PORTS[:1]

     command_socket_file = command_socket.makefile("rb")

def run_cmd(cmd_str):
     debug("Command Received.")
     debug("Received: %s" % cmd_str.strip(), 2)
     global uvm
     if uvm == None:
          try:
               debug("Reinitializing UVM Connection...")
               uvm = Uvm().getUvmContext( hostname="127.0.0.1", username=None, password=None, timeout=30 )
          except Exception,e:
               debug("Exception: %s" % repr(e))
               uvm = None
     try:
          result = eval(cmd_str.strip())
          return str(result)
     except Exception,e:
          uvm = None
          debug("Exception: %s" % traceback.print_exc(e))
          return "Error (%s)" % type(e)

def read_from_cmd():
     global command_socket, command_socket_file
     global RETRY_TIME_SHORT, RETRY_TIME_LONG

     # connect to center (if necessary)
     if command_socket == None:
          connect()
     if command_socket == None:
          reset_command_socket()
          debug("Failed to connect. Retrying in %i seconds..." % RETRY_TIME_LONG)
          time.sleep( RETRY_TIME_LONG ); return;
     else:
          write_status_file(True)

     # read from center
     try:
          cmd = command_socket_file.readline()
          if cmd == "":
               sys.stderr.write("Disconnected. Retrying in %i seconds...\n" % RETRY_TIME_SHORT)
               reset_command_socket()
               time.sleep( RETRY_TIME_SHORT ); return;
     except Exception,e:
          sys.stderr.write("Failed to read: (%s)\n" % e )
          reset_command_socket()
          time.sleep( RETRY_TIME_LONG ); return;

     # run command
     output = run_cmd(cmd)
     debug("Result: %s" % output.strip())
     try:
          output_len = len(output)
          command_socket.sendall(str(output_len) + "\n" + str(output))
     except Exception,e:
          sys.stderr.write("Failed to write: (%s)\n" % e )
          reset_command_socket()
          time.sleep( RETRY_TIME_SHORT ); return;

def reset_command_socket():
     global command_socket
     command_socket = None
     write_status_file(False)

def write_status_file(connected):
     status_filename = "/var/run/ut-pyconnector.status"
     status_file = open(status_filename,"w")
     if connected:
          status_file.write("connected")
     else:
          status_file.write("unconnected")
     status_file.close()

def check_pid_file():
     pid_filename = "/var/run/ut-pyconnector.pid"
     old_pid = None
     if os.access(pid_filename, os.F_OK):
          pid_file = open(pid_filename, "r")
          pid_file.seek(0)
          old_pid = pid_file.readline().strip()

     # if theres already a pid file and its not me, exit
     if (os.path.exists("/proc/%s" % old_pid)):
          if (str(os.getpid()) != old_pid):
               print "ut-pyconnector already running! pid: %s" % old_pid
               sys.exit(1)
          else:
               debug("removing stale pid file: %s" % old_pid)
               os.remove(pid_filename)

     pid_file = open(pid_filename, "w")
     pid_file.write("%s" % os.getpid())
     pid_file.close()

def parse_args():
     try:
          opts, args = getopt.getopt(sys.argv[1:], "hl:s:p:d:", ['help', 'log=', 'server=', 'port=', 'debug-level=' ])
     except getopt.GetoptError, err:
          print str(err)
          usage()
          sys.exit(2)
     
     cmd_servers = []
     cmd_ports = []

     for opt in opts:
          k, v = opt
          if k == '-h' or k == '--help':
               usage()
               sys.exit(0)
          elif k == '-l' or k == '--log':
               logfile = open(v,"a")
               sys.stdout = logfile
               sys.stderr = logfile
          elif k == '-s' or k == '--server':
               cmd_servers.append(v)
          elif k == '-p' or k == '--port':
               cmd_ports.append(int(v))
          elif k == '-d' or k == '--debug-level':
               global debug_level
               debug_level = int(v)

     if cmd_servers != []:
          global UNTANGLE_CMD_SERVERS
          UNTANGLE_CMD_SERVERS = cmd_servers
     if cmd_ports != []:
          global UNTANGLE_CMD_PORTS
          UNTANGLE_CMD_PORTS = cmd_ports


#
# Main
#
if __name__ == "__main__":
     write_status_file(False)
     try: os.makedirs("/tmp/pyconnector") 
     except: pass
     parse_args()
     check_pid_file()

     while True: 
          debug("")
          read_from_cmd()


