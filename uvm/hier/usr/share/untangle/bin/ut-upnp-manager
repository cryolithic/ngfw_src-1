#!/usr/bin/python3

# Under iptables, nat, read upnp-rules chain
# return Json output for UI

import getopt
import json
import re
import subprocess
import sys

if "@PREFIX@" != '':
    sys.path.insert(0, '@PREFIX@/usr/lib/python3/dist-packages')
class Iptables:

    regex_chain_prefix = re.compile(r'^Chain ([^w]+)')
    iptables_command = "/sbin/iptables"

    def __init__(self, nat_table, filter_table, chain):
        """
        Initialize with values to look for
        """
        self.nat_table = nat_table
        self.filter_table = filter_table
        # Currently same chain name is used in both filter and nat tables
        self.chain = chain
        self.parse()

    def get_filter_key(self, entry_values, destination_ip_address=None):
        """
        Build key for filter table information for lookups

        When called from filter table processing, use values.
        When calld from nat table processing, needs explicit destination address
        """
        key = None
        if len(entry_values) > 11:
            if destination_ip_address is not None:
                address = destination_ip_address
            else:
                address = entry_values[9]
            port = entry_values[11]
            if ":" in port:
                port = port[port.find(":")+1:]
            key = f"{address} {entry_values[10]} {port}"
        return key

    def parse(self):
        """
        Parse iptables chain into hash
        """
        self.data = {
        	"active": []
        }

        # Filter table contains traffic information but not full source/destination.
        # Build hash of these entries with a key so when processing the nat table
        # (which has more information) can lookup from this hash to populate accomanying
        # bytes/packets counts.
        process = subprocess.Popen(self.iptables_command + " -t " + self.filter_table + " -L " + self.chain + " -nv --line-numbers", stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, text=True)
        (process_stdout, process_stderror) = process.communicate()
        filter_table = {}
        for entry in process_stdout.splitlines():
            if re.match(self.regex_chain_prefix, entry):
                continue
            entry_values = entry.split()
            if len(entry_values) < 11:
                continue
            key = self.get_filter_key(entry_values)
            if key is None:
                continue
            filter_table[key] = entry_values

        process = subprocess.Popen(self.iptables_command + " -t " + self.nat_table + " -L " + self.chain + " -nv --line-numbers", stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, text=True)
        (process_stdout, process_stderror) = process.communicate()
        headers = []
        for entry in process_stdout.splitlines():
            if re.match(self.regex_chain_prefix, entry):
                continue
            entry_values = entry.split()
            if len(headers) == 0:
                headers = entry_values
                # Extra DNAT options
                headers.insert(0, "internalId")
                headers.append("upnp_protocol")
                headers.append("upnp_destination_port")
                headers.append("upnp_client_ip_address")
                headers.append("upnp_client_port")
                continue

            destination_ip_address = None
            for index, value in enumerate(entry_values):
                if ":" in value:
                	# Break down dnat values
                    entry_values[index] = value[value.find(":")+1:]
                    if ":" in entry_values[index]:
                    	# Break down client
                        value = entry_values[index]
                        destination_ip_address = value[:value.find(":")]
                        port = value[value.find(":"):]
                        entry_values[index] = value[:value.find(":"):]
                        entry_values.append(port)

            filter_key = self.get_filter_key(entry_values, destination_ip_address)
            if filter_key in filter_table:
                entry_values[0] = filter_table[filter_key][0]
                entry_values[1] = filter_table[filter_key][1]

            entry_values.insert(0, entry_values[0])
            self.data["active"].append(dict(list(zip(headers, entry_values))))

    def get_json(self):
        """
        Return data
        """
        return self.data

    def match_rule(self, rule, rule_matches):
        """
        Compare rule ignoring indexes
        """
        result = True
        for key in rule_matches:
            if key == "internalId" or key == "num":
                continue
            if key in rule and key in rule_matches and rule[key] != rule_matches[key]:
                result = False
                break
        return result

    def delete(self, rule_match):
        """
        Delete rule by rule specification
        """
        rule = json.loads(rule_match.replace("'", "\""))
        self.parse()
        upnp_option_match = rule["upnp_protocol"] + " dpt:" + rule["upnp_destination_port"] + " to:" + rule["upnp_client_ip_address"] + ":" + rule["upnp_client_port"]
        for active_rule in self.data["active"]:
            if self.match_rule(active_rule, rule) is True:
                try:
                    process = subprocess.Popen(self.iptables_command + " -t " + self.nat_table + " -D " + self.chain + " " + str(active_rule["num"]), shell=True, text=True)
                    print("deleted")
                except:
                    print("not delete")

def main(argv):
    """
    Main loop
    """

    iptables = Iptables("nat", "filter", "MINIUPNPD")
    try:
        opts, args = getopt.getopt(argv, "sd", ["status", "delete="] )
    except getopt.GetoptError:
        # usage()
        sys.exit(2)
    for opt, arg in opts:
        if opt in ( "-s", "--status"):
            print(iptables.get_json())
        elif opt in ( "-d", "--delete"):
            iptables.delete(arg)

if __name__ == "__main__":
    main(sys.argv[1:])
