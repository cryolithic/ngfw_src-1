#!/usr/bin/python

# Under iptables, nat, read upnp-rules chain
# return Json output for UI

# iptables -t nat -L upnp-rules -nv

import getopt
import json
import re
import subprocess
import sys

if "@PREFIX@" != '':
    sys.path.insert(0, '@PREFIX@/usr/lib/python2.7/dist-packages')


class Iptables:

    regex_chain_prefix = re.compile(r'^Chain ([^w]+)')
    iptables_command = "/sbin/iptables"

    def __init__(self, table, chain):
    	self.table = table
    	self.chain = chain
    	self.parse()

    def parse(self):
        """
        Parse iptables chain into hash
        """
        self.data = {
        	"active": []
        }
        process = subprocess.Popen(self.iptables_command + " -t " + self.table + " -L " + self.chain + " -nv --line-numbers", stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
        (process_stdout, process_stderror) = process.communicate()
        headers = []
        for entry in process_stdout.splitlines():
            if re.match(self.regex_chain_prefix, entry):
                continue
            entry_values = entry.split()
            if len(headers) == 0:
                headers = entry_values
                # Extra DNAT options
                headers.insert(0, "internalId")
                headers.append("upnp_protocol")
                headers.append("upnp_destination_port")
                headers.append("upnp_client_ip_address")
                headers.append("upnp_client_port")
                continue

            for index, value in enumerate(entry_values):
                if ":" in value:
                	# Break down dnat values
                    entry_values[index] = value[value.find(":")+1:]
                    if ":" in entry_values[index]:
                    	# Break down client
                        value = entry_values[index]
                        port = value[value.find(":"):]
                        entry_values[index] = value[:value.find(":"):]
                        entry_values.append(port)

            entry_values.insert(0, entry_values[0])
            
            self.data["active"].append(dict(zip(headers, entry_values)))

    def get_json(self):
        """
        Return data
        """
        return self.data

    def match_rule(self, rule, rule_matches):
        """
        Compare rule ignoring indexes
        """
        result = True
        for key in rule_matches:
            if key == "internalId" or key == "num":
                continue
            if key in rule and key in rule_matches and rule[key] != rule_matches[key]:
                result = False
                break
        return result

    def delete(self, rule_match):
        """
        Delete rule by rule specification
        """
        rule = json.loads(rule_match.replace("'", "\""))
        self.parse()
        upnp_option_match = rule["upnp_protocol"] + " dpt:" + rule["upnp_destination_port"] + " to:" + rule["upnp_client_ip_address"] + ":" + rule["upnp_client_port"]
        for active_rule in self.data["active"]:
            if self.match_rule(active_rule, rule) is True:
                try:
                    process = subprocess.Popen(self.iptables_command + " -t " + self.table + " -D " + self.chain + " " + str(active_rule["num"]), shell=True)
                    print "deleted"
                except:
                    print "not delete"

def main(argv):
    """
    Main loop
    """

    iptables = Iptables("nat", "upnp-rules")
    try:
        opts, args = getopt.getopt(argv, "sd", ["status", "delete="] )
    except getopt.GetoptError:
        # usage()
        sys.exit(2)
    for opt, arg in opts:
        if opt in ( "-s", "--status"):
            print iptables.get_json()
        elif opt in ( "-d", "--delete"):
            iptables.delete(arg)

if __name__ == "__main__":
    main(sys.argv[1:])
