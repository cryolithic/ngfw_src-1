Ext.define('Ung.util.Map', {
    singleton: true,
    alternateClassName: 'Map',

    policies: {
        1: 'Default'
    },

    init: function () {
        this.buildInterfacesMap();
        this.buildPoliciesMap();
    },

    buildInterfacesMap: function () {
        var interfaces, map = {};
        if (rpc.reportsManager) {
            interfaces = Rpc.directData('rpc.reportsManager.getInterfacesInfo').list;
            Ext.Array.each(interfaces, function (intf) {
                map[intf.interfaceId] = intf.name;
            });
        }
        this.interfaces = map;
    },

    buildPoliciesMap: function () {
        var policies,
            map = { 1: 'Default' };

        if (rpc.reportsManager) {
            policies = Rpc.directData('rpc.reportsManager.getPoliciesInfo');
            if (policies) {
                Ext.Array.each(policies, function (policy) {
                    // map[intf.interfaceId] = intf.name;
                });
            }
        }
        this.policies = map;
    },

    /**
     * map containing all possible columns from all models/tables
     */
    columns: {
        // http_events
        'request_id': { text: 'Request Id'.t(), width: 120 },
        'time_stamp': { text: 'Timestamp'.t(), width: 160 },
        'start_time': { text: 'Start Time'.t(), width: 160 },
        'end_time': { text: 'End Time'.t(), width: 160 },
        'session_id': { text: 'Session Id'.t(), width: 120 },
        'client_intf': { text: 'Client Interface'.t(), width: 100 },
        'server_intf': { text: 'Server Interface'.t(), width: 100 },
        'c_client_addr': { text: 'Client'.t(), width: 120 },
        's_client_addr': { text: 'New Client'.t(), width: 120 },
        'c_server_addr': { text: 'Original Server'.t(), width: 120 },
        's_server_addr': { text: 'Server'.t(), width: 120 },
        'c_client_port': { text: 'Client Port'.t(), width: 120 },
        's_client_port': { text: 'New Client Port'.t(), width: 120 },
        'c_server_port': { text: 'Original Server Port'.t(), width: 120 },
        's_server_port': { text: 'Server Port'.t(), width: 120 },
        'client_country': { text: 'Client Country'.t(), width: 120 },
        'client_latitude': { text: 'Client Latitude'.t(), width: 120 },
        'client_longitude': { text: 'Client Longitude'.t(), width: 120 },
        'server_country': { text: 'Server Country'.t(), width: 120 },
        'server_latitude': { text: 'Server Latitude'.t(), width: 120 },
        'server_longitude': { text: 'Server Longitude'.t(), width: 120 },
        'policy_id': { text: 'Policy Id'.t(), width: 120 },
        'policy_rule_id': { text: 'Policy Rule'.t(), width: 100 },
        'username': { text: 'Username'.t(), width: 120 },
        'hostname': { text: 'Hostname'.t(), width: 120 },
        'method': { text: 'Method'.t(), width: 120 },
        'uri': { text: 'URI'.t(), width: 120 },
        'host': { text: 'Host'.t(), width: 250 },
        'domain': { text: 'Domain'.t(), width: 120 },
        'referer': { text: 'Referer'.t(), width: 120 },
        'c2s_content_length'  : { text: 'Upload Content Length'.t(), width: 120 },
        's2c_content_length'  : { text: 'Download Content Length'.t(), width: 120 },
        's2c_content_type'    : { text: 'Content Type'.t(), width: 120 },
        's2c_content_filename': { text: 'Content Filename'.t(), width: 120 },

        'ad_blocker_cookie_ident': { text: 'Blocked Cookie'.t() + ' (Ad Blocker)', width: 120 },
        'ad_blocker_action'      : { text: 'Action'.t() + ' (Ad Blocker)', width: 120 },

        'web_filter_reason'     : { text: 'Reason For Action'.t() + ' (Web Filter)', width: 120 },
        'web_filter_category_id': { text: 'Web Category'.t() + ' (Web Filter)', width: 250 },
        'web_filter_rule_id'    : { text: 'Web Rule'.t() + ' (Web Filter)', width: 120 },
        'web_filter_blocked'    : { text: 'Blocked'.t() + ' (Web Filter)', width: 120 },
        'web_filter_flagged'    : { text: 'Flagged'.t() + ' (Web Filter)', width: 120 },

        'virus_blocker_lite_clean': { text: 'Clean'.t() + ' (Virus Blocker Lite)', width: 120 },
        'virus_blocker_lite_name' : { text: 'Virus Name'.t() + ' (Virus Blocker Lite)', width: 120 },
        'virus_blocker_clean'     : { text: 'Clean'.t() + ' (Virus Blocker)', width: 120 },
        'virus_blocker_name'      : { text: 'Virus Name'.t() + ' (Virus Blocker)', width: 120 },

        'threat_prevention_blocked'          : { text: 'Blocked'.t() + ' (Threat Prevention)', width: 120 },
        'threat_prevention_flagged'          : { text: 'Flagged'.t() + ' (Threat Prevention)', width: 120 },
        'threat_prevention_reason'           : { text: 'Reason'.t(), width: 100 },
        'threat_prevention_rule_id'          : { text: 'Rule'.t() + ' (Threat Prevention)', width: 120 },
        'threat_prevention_reputation'       : { text: 'Reputation'.t() + ' (Threat Prevention)', width: 120 },
        'threat_prevention_categories'       : { text: 'Categories'.t() + ' (Threat Prevention)', width: 120 },
        'threat_prevention_client_reputation': { text: 'Client Reputation'.t() + ' (Threat Prevention)', width: 100 },
        'threat_prevention_client_categories': { text: 'Client Categories'.t() + ' (Threat Prevention)', width: 100 },
        'threat_prevention_server_reputation': { text: 'Server Reputation'.t() + ' (Threat Prevention)', width: 100 },
        'threat_prevention_server_categories': { text: 'Server Categories'.t() + ' (Threat Prevention)', width: 100 },

        'application_control_lite_protocol': { text: 'Protocol'.t() + ' (Application Control Lite)', width: 120 },
        'application_control_lite_blocked' : { text: 'Blocked'.t() + ' (Application Control Lite)', width: 120 },
        'application_control_application'  : { text: 'Application'.t() + ' (Application Control)', width: 120 },
        'application_control_protochain'   : { text: 'Protochain'.t() + ' (Application Control)', width: 120 },
        'application_control_category'     : { text: 'Category'.t() + ' (Application Control)', width: 120 },
        'application_control_blocked'      : { text: 'Blocked'.t() + ' (Application Control)', width: 120 },
        'application_control_flagged'      : { text: 'Flagged'.t() + ' (Application Control)', width: 120 },
        'application_control_confidence'   : { text: 'Confidence'.t() + ' (Application Control)', width: 120 },
        'application_control_ruleid'       : { text: 'Rule'.t() + ' (Application Control)', width: 120 },
        'application_control_detail'       : { text: 'Detail'.t() + ' (Application Control)', width: 120 },

        'bandwidth_control_priority': { text: 'Priority'.t() + ' (Bandwidth Control)', width: 120 },
        'bandwidth_control_rule'    : { text: 'Rule'.t() + ' (Bandwidth Control)', width: 120 },

        'captive_portal_blocked'   :  { text: 'Blocked'.t() + ' (Captive Portal)', width: 120 },
        'captive_portal_rule_index':  { text: 'Rule'.t() + ' (Captive Portal)', width: 120 },

        'ssl_inspector_ruleid':       { text: 'Rule'.t() + ' (SSL Inspector)', width: 120 },
        'ssl_inspector_status':       { text: 'Status'.t() + ' (SSL Inspector)', width: 120 },
        'ssl_inspector_detail':       { text: 'Detail'.t() + ' (SSL Inspector)', width: 120 },

        'firewall_blocked'   :        { text: 'Blocked'.t() + ' (Firewall)', width: 120 },
        'firewall_flagged'   :        { text: 'Flagged'.t() + ' (Firewall)', width: 120 },
        'firewall_rule_index':        { text: 'Rule'.t() + ' (Firewall)', width: 120 },


        // host_table_updates
        'address': { text: 'Address'.t(), width: 120 },
        'key': { text: 'Key'.t(), width: 120 },
        'value': { text: 'Value'.t(), width: 120 },
        'old_value': { text: 'Old Value'.t(), width: 120 },

        'mac_address': { text: 'MAC Address'.t(), width: 120 },

        // sessions table
        'bypassed': { text: 'Bypassed'.t(), width: 80 },
        'entitled': { text: 'Entitled'.t(), width: 80 },

        'protocol'      : { text: 'Protocol'.t(), width: 80 },
        'icmp_type'     : { text: 'ICMP Type'.t(), width: 80 },
        'local_addr'    : { text: 'Local Address'.t() , width: 120 },
        'local_address' : { text: 'Local Address'.t() , width: 120 },
        'remote_addr'   : { text: 'Remote Address'.t(), width: 120 },
        'remote_address': { text: 'Remote Address'.t(), width: 120 },
        'c2p_bytes'     : { text: 'From-Client Bytes'.t(), width: 80 },
        'p2c_bytes'     : { text: 'To-Client Bytes'.t(), width: 80 },
        's2p_bytes'     : { text: 'From-Server Bytes'.t(), width: 80 },
        'p2s_bytes'     : { text: 'To-Server Bytes'.t(), width: 80 },

        'c2s_bytes'     : { text: 'From-Client Bytes'.t(), width: 80 },
        's2c_bytes'     : { text: 'From-Server Bytes'.t(), width: 80 },

        'filter_prefix': { text: 'Filter Prefix'.t(), width: 80 },
        'tags': { text: 'Tags'.t(), width: 160 },

        // admin_logins table
        'client_addr': { text: 'Client Address'.t(), width: 120 },
        'login'      : { text: 'Login'.t(), width: 100 },
        'local'      : { text: 'Local'.t(), width: 100 },
        'succeeded'  : { text: 'Succeeded'.t(), width: 100 },
        'reason'     : { text: 'Reason'.t(), width: 100 },

        // settings_changes
        'settings_file': { text: 'Settings File'.t(), width: 200 },

        // alerts
        'description': { text: 'Description'.t(), width: 200 },
        'summary_text': { text: 'Summary'.t(), width: 200 },
        'json': { text: 'JSON'.t(), width: 200 },

        // server_events
        'load_1'      : { text: 'Load (1-minute)'.t(), width: 100, align: 'right' },
        'load_5'      : { text: 'Load (5-minute)'.t(), width: 80, align: 'right' },
        'load_15'     : { text: 'Load (15-minute)'.t(), width: 80, align: 'right' },
        'cpu_user'    : { text: 'CPU User Utilization'.t(), width: 100, align: 'right' },
        'cpu_system'  : { text: 'CPU System Utilization'.t(), width: 100, align: 'right' },
        'mem_total'   : { text: 'Memory Total'.t(), width: 100, align: 'right', renderer: Renderer2.memory },
        'mem_free'    : { text: 'Memory Free'.t(), width: 100, align: 'right', renderer: Renderer2.memory },
        'disk_total'  : { text: 'Disk Total'.t(), width: 100, align: 'right', renderer: Renderer2.disk },
        'disk_free'   : { text: 'Disk Free'.t(), width: 100, align: 'right', renderer: Renderer2.disk },
        'swap_total'  : { text: 'Swap Total'.t(), width: 100, align: 'right', renderer: Renderer2.memory },
        'swap_free'   : { text: 'Swap Free'.t(), width: 100, align: 'right', renderer: Renderer2.memory },
        'active_hosts': { text: 'Active Hosts'.t(), width: 100 },

        // mail_addr
        'msg_id'   : { text: 'Message Id'.t(), width: 120 },
        'subject'  : { text: 'Subject'.t(), width: 120 },
        'addr'     : { text: 'Receiver'.t(), width: 120 },
        'addr_name': { text: 'Address Name'.t(), width: 120 },
        'addr_kind': { text: 'Address Kind'.t(), width: 120 },
        'event_id' : { text: 'Event Id'.t(), width: 120 },
        'sender'   : { text: 'Sender'.t(), width: 120 },

        'virus_blocker_lite_clean': { text: 'Clean'.t() + ' (Virus Blocker Lite)', width: 120 },
        'virus_blocker_lite_name' : { text: 'Name'.t() + ' (Virus Blocker Lite)', width: 120 },
        'virus_blocker_clean'     : { text: 'Clean'.t() + ' (Virus Blocker)', width: 120 },
        'virus_blocker_name'      : { text: 'Name'.t() + ' (Virus Blocker)', width: 120 },

        'spam_blocker_lite_score'       : { text: 'Spam Score'.t() + ' (Spam Blocker Lite)', width: 120 },
        'spam_blocker_lite_is_spam'     : { text: 'Is Spam'.t() + ' (Spam Blocker Lite)', width: 120 },
        'spam_blocker_lite_action'      : { text: 'Action'.t() + ' (Spam Blocker Lite)', width: 120 },
        'spam_blocker_lite_tests_string': { text: 'Detail'.t() + ' (Spam Blocker Lite)', width: 120 },
        'spam_blocker_score'            : { text: 'Spam Score'.t() + ' (Spam Blocker)', width: 120 },
        'spam_blocker_is_spam'          : { text: 'Is Spam'.t() + ' (Spam Blocker)', width: 120 },
        'spam_blocker_action'           : { text: 'Action'.t() + ' (Spam Blocker)', width: 120 },
        'spam_blocker_tests_string'     : { text: 'Detail'.t() + ' (Spam Blocker)', width: 120 },

        'phish_blocker_score'           : { text: 'Score'.t() + ' (Phish Blocker)', width: 120 },
        'phish_blocker_is_spam'         : { text: 'Is Spam'.t() + ' (Phish Blocker)', width: 120 },
        'phish_blocker_tests_string'    : { text: 'Detail'.t() + ' (Phish Blocker)', width: 120 },
        'phish_blocker_action'          : { text: 'Action'.t() + ' (Phish Blocker)', width: 120 },

        'ipaddr': { text: 'Sender'.t(), width: 200 },
        'vendor_name': { text: 'Vendor Name'.t(), width: 200 }
    },

    tables: {
        admin_logins: ['time_stamp', 'login', 'local', 'client_addr', 'succeeded', 'reason'],
        alerts: ['time_stamp', 'description', 'summary_text', 'json'],
        device_table_updates: ['time_stamp', 'mac_address', 'key', 'value', 'old_value'],
        ftp_events: [
            'time_stamp',
            'event_id',
            'session_id',
            'client_intf',
            'server_intf',
            'c_client_addr',
            's_client_addr',
            'c_server_addr',
            's_server_addr',
            'policy_id',
            'username',
            'hostname',
            'request_id',
            'method',
            'uri'
        ],
        host_table_updates: ['time_stamp', 'address', 'key', 'value', 'old_value'],
        http_events: [
            'request_id',
            'time_stamp',
            'session_id',
            'client_intf',
            'server_intf',
            'c_client_addr',
            's_client_addr',
            'c_server_addr',
            's_server_addr',
            'c_client_port',
            's_client_port',
            'c_server_port',
            's_server_port',
            'client_country',
            'client_latitude',
            'client_longitude',
            'server_country',
            'server_latitude',
            'server_longitude',
            'policy_id',
            'username',
            'hostname',
            'method',
            'uri',
            'host',
            'domain',
            'referer',
            'c2s_content_length',
            's2c_content_length',
            's2c_content_type',
            's2c_content_filename',
            'ad_blocker_cookie_ident',
            'ad_blocker_action',
            'web_filter_reason',
            'web_filter_category_id',
            'web_filter_rule_id',
            'web_filter_blocked',
            'web_filter_flagged',
            'virus_blocker_lite_clean',
            'virus_blocker_lite_name',
            'virus_blocker_clean',
            'virus_blocker_name',
            'threat_prevention_blocked',
            'threat_prevention_flagged',
            'threat_prevention_rule_id',
            'threat_prevention_reputation',
            'threat_prevention_categories'
        ],
        http_query_events: [
            'event_id',
            'time_stamp',
            'session_id',
            'client_intf',
            'server_intf',
            'c_client_addr',
            's_client_addr',
            'c_server_addr',
            's_server_addr',
            'c_client_port',
            's_client_port',
            'c_server_port',
            's_server_port',
            'policy_id',
            'username',
            'hostname',
            'request_id',
            'method',
            'uri',
            'term',
            'host',
            'c2s_content_length',
            's2c_content_length',
            's2c_content_type',
            'blocked',
            'flagged'
        ],
        mail_addrs: [
            'time_stamp',
            'session_id',
            'server_intf',
            'c_client_addr',
            'c_server_addr',
            'c_client_port',
            'c_server_port',
            's_client_addr',
            's_server_addr',
            's_client_port',
            's_server_port',
            'policy_id',
            'username',
            'msg_id',
            'subject',
            'addr',
            'addr_name',
            'addr_kind',
            'hostname',
            'event_id',
            'sender',
            'virus_blocker_lite_clean',
            'virus_blocker_lite_name',
            'virus_blocker_clean',
            'virus_blocker_name',
            'spam_blocker_lite_score',
            'spam_blocker_lite_is_spam',
            'spam_blocker_lite_action',
            'spam_blocker_lite_tests_string',
            'spam_blocker_score',
            'spam_blocker_is_spam',
            'spam_blocker_action',
            'spam_blocker_tests_string',
            'phish_blocker_score',
            'phish_blocker_is_spam',
            'phish_blocker_tests_string',
            'phish_blocker_action'
        ],
        server_events: [
            'time_stamp',
            'load_1',
            'load_5',
            'load_15',
            'cpu_user',
            'cpu_system',
            'mem_total',
            'mem_free',
            'disk_total',
            'disk_free',
            'swap_total',
            'swap_free',
            'active_hosts'
        ],
        session_minutes: [
            'session_id',
            'time_stamp',
            'c2s_bytes',
            's2c_bytes',
            'start_time',
            'end_time',
            'bypassed',
            'entitled',
            'protocol',
            'icmp_type',
            'hostname',
            'username',
            'policy_id',
            'policy_rule_id',
            'local_addr',
            'remote_addr',
            'c_client_addr',
            'c_server_addr',
            'c_client_port',
            'c_server_port',
            's_client_addr',
            's_server_addr',
            's_client_port',
            's_server_port',
            'client_intf',
            'server_intf',
            'client_country',
            'client_latitude',
            'client_longitude',
            'server_country',
            'server_latitude',
            'server_longitude',
            'filter_prefix',
            'firewall_blocked',
            'firewall_flagged',
            'firewall_rule_index',
            'threat_prevention_blocked',
            'threat_prevention_flagged',
            'threat_prevention_reason',
            'threat_prevention_rule_id',
            'threat_prevention_client_reputation',
            'threat_prevention_client_categories',
            'threat_prevention_server_reputation',
            'threat_prevention_server_categories',
            'application_control_lite_protocol',
            'application_control_lite_blocked',
            'captive_portal_blocked',
            'captive_portal_rule_index',
            'application_control_application',
            'application_control_protochain',
            'application_control_category',
            'application_control_blocked',
            'application_control_flagged',
            'application_control_confidence',
            'application_control_ruleid',
            'application_control_detail',
            'bandwidth_control_priority',
            'bandwidth_control_rule',
            'ssl_inspector_ruleid',
            'ssl_inspector_status',
            'ssl_inspector_detail',
            'tags'
        ],
        sessions: [
            'session_id',
            'time_stamp',
            'end_time',
            'bypassed',
            'entitled',
            'protocol',
            'icmp_type',
            'hostname',
            'username',
            'policy_id',
            'policy_rule_id',
            'local_address',
            'remote_address',
            'c_client_addr',
            'c_server_addr',
            'c_client_port',
            'c_server_port',
            's_client_addr',
            's_server_addr',
            's_client_port',
            's_server_port',
            'client_intf',
            'server_intf',
            'client_country',
            'client_latitude',
            'client_longitude',
            'server_country',
            'server_latitude',
            'server_longitude',
            'c2p_bytes',
            'p2c_bytes',
            's2p_bytes',
            'p2s_bytes',
            'filter_prefix',
            'firewall_blocked',
            'firewall_flagged',
            'firewall_rule_index',
            'threat_prevention_blocked',
            'threat_prevention_flagged',
            'threat_prevention_reason',
            'threat_prevention_rule_id',
            'threat_prevention_client_reputation',
            'threat_prevention_client_categories',
            'threat_prevention_server_reputation',
            'threat_prevention_server_categories',
            'application_control_lite_protocol',
            'application_control_lite_blocked',
            'captive_portal_blocked',
            'captive_portal_rule_index',
            'application_control_application',
            'application_control_protochain',
            'application_control_category',
            'application_control_blocked',
            'application_control_flagged',
            'application_control_confidence',
            'application_control_ruleid',
            'application_control_detail',
            'bandwidth_control_priority',
            'bandwidth_control_rule',
            'ssl_inspector_ruleid',
            'ssl_inspector_status',
            'ssl_inspector_detail',
            'tags'
        ],
        settings_changes: [
            'time_stamp',
            'settings_file',
            'username',
            'hostname'
        ],
        smtp_tarpit_events: [
            'time_stamp',
            'ipaddr',
            'hostname',
            'policy_id',
            'vendor_name',
            'event_id'
        ],
        user_table_updates: [
            'time_stamp',
            'username',
            'key',
            'value',
            'old_value'
        ]
    },


    webReasons: {
        D: 'in Categories Block list'.t(),
        U: 'in Site Block list'.t(),
        T: 'in Search Term list'.t(),
        E: 'in File Block list'.t(),
        M: 'in MIME Types Block list'.t(),
        H: 'hostname is an IP address'.t(),
        I: 'in Site Pass list'.t(),
        R: 'referer in Site Pass list'.t(),
        C: 'in Clients Pass list'.t(),
        B: 'in Temporary Unblocked list'.t(),
        F: 'in Rules list'.t(),
        K: 'Kid-friendly redirect'.t(),
        default: 'no rule applied'.t()
    },

    webCategories: {
        0: 'Uncategorized',
        1: 'Real Estate',
        2: 'Computer and Internet Security',
        3: 'Financial Services',
        4: 'Business and Economy',
        5: 'Computer and Internet Info',
        6: 'Auctions',
        7: 'Shopping',
        8: 'Cult and Occult',
        9: 'Travel',
        10: 'Abused Drugs',
        11: 'Adult and Pornography',
        12: 'Home and Garden',
        13: 'Military',
        14: 'Social Networking',
        15: 'Dead Sites',
        16: 'Individual Stock Advice and Tools',
        17: 'Training and Tools',
        18: 'Dating',
        19: 'Sex Education',
        20: 'Religion',
        21: 'Entertainment and Arts',
        22: 'Personal sites and Blogs',
        23: 'Legal',
        24: 'Local Information',
        25: 'Streaming Media',
        26: 'Job Search',
        27: 'Gambling',
        28: 'Translation',
        29: 'Reference and Research',
        30: 'Shareware and Freeware',
        31: 'Peer to Peer',
        32: 'Marijuana',
        33: 'Hacking',
        34: 'Games',
        35: 'Philosophy and Political Advocacy',
        36: 'Weapons',
        37: 'Pay to Surf',
        38: 'Hunting and Fishing',
        39: 'Society',
        40: 'Educational Institutions',
        41: 'Online Greeting Cards',
        42: 'Sports',
        43: 'Swimsuits and Intimate Apparel',
        44: 'Questionable',
        45: 'Kids',
        46: 'Hate and Racism',
        47: 'Personal Storage',
        48: 'Violence',
        49: 'Keyloggers and Monitoring',
        50: 'Search Engines',
        51: 'Internet Portals',
        52: 'Web Advertisements',
        53: 'Cheating',
        54: 'Gross',
        55: 'Web-based Email',
        56: 'Malware Sites',
        57: 'Phishing and Other Frauds',
        58: 'Proxy Avoidance and Anonymizers',
        59: 'Spyware and Adware',
        60: 'Music',
        61: 'Government',
        62: 'Nudity',
        63: 'News and Media',
        64: 'Illegal',
        65: 'Content Delivery Networks',
        66: 'Internet Communications',
        67: 'Bot Nets',
        68: 'Abortion',
        69: 'Health and Medicine',
        71: 'SPAM URLs',
        74: 'Dynamically Generated Content',
        75: 'Parked Domains',
        76: 'Alcohol and Tobacco',
        78: 'Image and Video Search',
        79: 'Fashion and Beauty',
        80: 'Recreation and Hobbies',
        81: 'Motor Vehicles',
        82: 'Web Hosting'
    },

    protocols: {
        0: 'HOPOPT [0]',
        1: 'ICMP [1]',
        2: 'IGMP [2]',
        3: 'GGP [3]',
        4: 'IP-in-IP [4]',
        5: 'ST [5]',
        6: 'TCP [6]',
        7: 'CBT [7]',
        8: 'EGP [8]',
        9: 'IGP [9]',
        10: 'BBN-RCC-MON [10]',
        11: 'NVP-II [11]',
        12: 'PUP [12]',
        13: 'ARGUS [13]',
        14: 'EMCON [14]',
        15: 'XNET [15]',
        16: 'CHAOS [16]',
        17: 'UDP [17]',
        18: 'MUX [18]',
        19: 'DCN-MEAS [19]',
        20: 'HMP [20]',
        21: 'PRM [21]',
        22: 'XNS-IDP [22]',
        23: 'TRUNK-1 [23]',
        24: 'TRUNK-2 [24]',
        25: 'LEAF-1 [25]',
        26: 'LEAF-2 [26]',
        27: 'RDP [27]',
        28: 'IRTP [28]',
        29: 'ISO-TP4 [29]',
        30: 'NETBLT [30]',
        31: 'MFE-NSP [31]',
        32: 'MERIT-INP [32]',
        33: 'DCCP [33]',
        34: '3PC [34]',
        35: 'IDPR [35]',
        36: 'XTP [36]',
        37: 'DDP [37]',
        38: 'IDPR-CMTP [38]',
        39: 'TP++ [39]',
        40: 'IL [40]',
        41: 'IPv6 [41]',
        42: 'SDRP [42]',
        43: 'IPv6-Route [43]',
        44: 'IPv6-Frag [44]',
        45: 'IDRP [45]',
        46: 'RSVP [46]',
        47: 'GRE [47]',
        48: 'MHRP [48]',
        49: 'BNA [49]',
        50: 'ESP [50]',
        51: 'AH [51]',
        52: 'I-NLSP [52]',
        53: 'SWIPE [53]',
        54: 'NARP [54]',
        55: 'MOBILE [55]',
        56: 'TLSP [56]',
        57: 'SKIP [57]',
        58: 'IPv6-ICMP [58]',
        59: 'IPv6-NoNxt [59]',
        60: 'IPv6-Opts [60]',
        62: 'CFTP [62]',
        64: 'SAT-EXPAK [64]',
        65: 'KRYPTOLAN [65]',
        66: 'RVD [66]',
        67: 'IPPC [67]',
        69: 'SAT-MON [69]',
        70: 'VISA [70]',
        71: 'IPCU [71]',
        72: 'CPNX [72]',
        73: 'CPHB [73]',
        74: 'WSN [74]',
        75: 'PVP [75]',
        76: 'BR-SAT-MON [76]',
        77: 'SUN-ND [77]',
        78: 'WB-MON [78]',
        79: 'WB-EXPAK [79]',
        80: 'ISO-IP [80]',
        81: 'VMTP [81]',
        82: 'SECURE-VMTP [82]',
        83: 'VINES [83]',
        84: 'TTP [84]',
        85: 'NSFNET-IGP [85]',
        86: 'DGP [86]',
        87: 'TCF [87]',
        88: 'EIGRP [88]',
        89: 'OSPF [89]',
        90: 'Sprite-RPC [90]',
        91: 'LARP [91]',
        92: 'MTP [92]',
        93: 'AX.25 [93]',
        94: 'IPIP [94]',
        95: 'MICP [95]',
        96: 'SCC-SP [96]',
        97: 'ETHERIP [97]',
        98: 'ENCAP [98]',
        100: 'GMTP [100]',
        101: 'IFMP [101]',
        102: 'PNNI [102]',
        103: 'PIM [103]',
        104: 'ARIS [104]',
        105: 'SCPS [105]',
        106: 'QNX [106]',
        107: 'A/N [107]',
        108: 'IPComp [108]',
        109: 'SNP [109]',
        110: 'Compaq-Peer [110]',
        111: 'IPX-in-IP [111]',
        112: 'VRRP [112]',
        113: 'PGM [113]',
        115: 'L2TP [115]',
        116: 'DDX [116]',
        117: 'IATP [117]',
        118: 'STP [118]',
        119: 'SRP [119]',
        120: 'UTI [120]',
        121: 'SMP [121]',
        122: 'SM [122]',
        123: 'PTP [123]',
        124: 'IS-IS [124]',
        125: 'FIRE [125]',
        126: 'CRTP [126]',
        127: 'CRUDP [127]',
        128: 'SSCOPMCE [128]',
        129: 'IPLT [129]',
        130: 'SPS [130]',
        131: 'PIPE [131]',
        132: 'SCTP [132]',
        133: 'FC [133]',
        134: 'RSVP-E2E-IGNORE [134]',
        135: 'Mobility [135]',
        136: 'UDPLite [136]',
        137: 'MPLS-in-IP [137]',
        138: 'manet [138]',
        139: 'HIP [139]',
        140: 'Shim6 [140]',
        141: 'WESP [141]',
        142: 'ROHC [142]',
        default: 'Unknown'.t()
    },

    countries: {
        XU: 'Unknown'.t(),
        XL: 'Local'.t(),
        AF: 'Afghanistan'.t(),
        AX: 'Aland Islands'.t(),
        AL: 'Albania'.t(),
        DZ: 'Algeria'.t(),
        AS: 'American Samoa'.t(),
        AD: 'Andorra'.t(),
        AO: 'Angola'.t(),
        AI: 'Anguilla'.t(),
        AQ: 'Antarctica'.t(),
        AG: 'Antigua and Barbuda'.t(),
        AR: 'Argentina'.t(),
        AM: 'Armenia'.t(),
        AW: 'Aruba'.t(),
        AU: 'Australia'.t(),
        AT: 'Austria'.t(),
        AZ: 'Azerbaijan'.t(),
        BS: 'Bahamas'.t(),
        BH: 'Bahrain'.t(),
        BD: 'Bangladesh'.t(),
        BB: 'Barbados'.t(),
        BY: 'Belarus'.t(),
        BE: 'Belgium'.t(),
        BZ: 'Belize'.t(),
        BJ: 'Benin'.t(),
        BM: 'Bermuda'.t(),
        BT: 'Bhutan'.t(),
        BO: 'Bolivia, Plurinational State of'.t(),
        BQ: 'Bonaire, Sint Eustatius and Saba'.t(),
        BA: 'Bosnia and Herzegovina'.t(),
        BW: 'Botswana'.t(),
        BV: 'Bouvet Island'.t(),
        BR: 'Brazil'.t(),
        IO: 'British Indian Ocean Territory'.t(),
        BN: 'Brunei Darussalam'.t(),
        BG: 'Bulgaria'.t(),
        BF: 'Burkina Faso'.t(),
        BI: 'Burundi'.t(),
        KH: 'Cambodia'.t(),
        CM: 'Cameroon'.t(),
        CA: 'Canada'.t(),
        CV: 'Cape Verde'.t(),
        KY: 'Cayman Islands'.t(),
        CF: 'Central African Republic'.t(),
        TD: 'Chad'.t(),
        CL: 'Chile'.t(),
        CN: 'China'.t(),
        CX: 'Christmas Island'.t(),
        CC: 'Cocos (Keeling) Islands'.t(),
        CO: 'Colombia'.t(),
        KM: 'Comoros'.t(),
        CG: 'Congo'.t(),
        CD: 'Congo, the Democratic Republic of the'.t(),
        CK: 'Cook Islands'.t(),
        CR: 'Costa Rica'.t(),
        CI: "Cote d'Ivoire".t(),
        HR: 'Croatia'.t(),
        CU: 'Cuba'.t(),
        CW: 'Curacao'.t(),
        CY: 'Cyprus'.t(),
        CZ: 'Czech Republic'.t(),
        DK: 'Denmark'.t(),
        DJ: 'Djibouti'.t(),
        DM: 'Dominica'.t(),
        DO: 'Dominican Republic'.t(),
        EC: 'Ecuador'.t(),
        EG: 'Egypt'.t(),
        SV: 'El Salvador'.t(),
        GQ: 'Equatorial Guinea'.t(),
        ER: 'Eritrea'.t(),
        EE: 'Estonia'.t(),
        ET: 'Ethiopia'.t(),
        FK: 'Falkland Islands (Malvinas)'.t(),
        FO: 'Faroe Islands'.t(),
        FJ: 'Fiji'.t(),
        FI: 'Finland'.t(),
        FR: 'France'.t(),
        GF: 'French Guiana'.t(),
        PF: 'French Polynesia'.t(),
        TF: 'French Southern Territories'.t(),
        GA: 'Gabon'.t(),
        GM: 'Gambia'.t(),
        GE: 'Georgia'.t(),
        DE: 'Germany'.t(),
        GH: 'Ghana'.t(),
        GI: 'Gibraltar'.t(),
        GR: 'Greece'.t(),
        GL: 'Greenland'.t(),
        GD: 'Grenada'.t(),
        GP: 'Guadeloupe'.t(),
        GU: 'Guam'.t(),
        GT: 'Guatemala'.t(),
        GG: 'Guernsey'.t(),
        GN: 'Guinea'.t(),
        GW: 'Guinea-Bissau'.t(),
        GY: 'Guyana'.t(),
        HT: 'Haiti'.t(),
        HM: 'Heard Island and McDonald Islands'.t(),
        VA: 'Holy See (Vatican City State)'.t(),
        HN: 'Honduras'.t(),
        HK: 'Hong Kong'.t(),
        HU: 'Hungary'.t(),
        IS: 'Iceland'.t(),
        IN: 'India'.t(),
        ID: 'Indonesia'.t(),
        IR: 'Iran, Islamic Republic of'.t(),
        IQ: 'Iraq'.t(),
        IE: 'Ireland'.t(),
        IM: 'Isle of Man'.t(),
        IL: 'Israel'.t(),
        IT: 'Italy'.t(),
        JM: 'Jamaica'.t(),
        JP: 'Japan'.t(),
        JE: 'Jersey'.t(),
        JO: 'Jordan'.t(),
        KZ: 'Kazakhstan'.t(),
        KE: 'Kenya'.t(),
        KI: 'Kiribati'.t(),
        KP: "Korea, Democratic People's Republic of".t(),
        KR: 'Korea, Republic of'.t(),
        KW: 'Kuwait'.t(),
        KG: 'Kyrgyzstan'.t(),
        LA: "Lao People's Democratic Republic".t(),
        LV: 'Latvia'.t(),
        LB: 'Lebanon'.t(),
        LS: 'Lesotho'.t(),
        LR: 'Liberia'.t(),
        LY: 'Libya'.t(),
        LI: 'Liechtenstein'.t(),
        LT: 'Lithuania'.t(),
        LU: 'Luxembourg'.t(),
        MO: 'Macao'.t(),
        MK: 'Macedonia, the Former Yugoslav Republic of'.t(),
        MG: 'Madagascar'.t(),
        MW: 'Malawi'.t(),
        MY: 'Malaysia'.t(),
        MV: 'Maldives'.t(),
        ML: 'Mali'.t(),
        MT: 'Malta'.t(),
        MH: 'Marshall Islands'.t(),
        MQ: 'Martinique'.t(),
        MR: 'Mauritania'.t(),
        MU: 'Mauritius'.t(),
        YT: 'Mayotte'.t(),
        MX: 'Mexico'.t(),
        FM: 'Micronesia, Federated States of'.t(),
        MD: 'Moldova, Republic of'.t(),
        MC: 'Monaco'.t(),
        MN: 'Mongolia'.t(),
        ME: 'Montenegro'.t(),
        MS: 'Montserrat'.t(),
        MA: 'Morocco'.t(),
        MZ: 'Mozambique'.t(),
        MM: 'Myanmar'.t(),
        NA: 'Namibia'.t(),
        NR: 'Nauru'.t(),
        NP: 'Nepal'.t(),
        NL: 'Netherlands'.t(),
        NC: 'New Caledonia'.t(),
        NZ: 'New Zealand'.t(),
        NI: 'Nicaragua'.t(),
        NE: 'Niger'.t(),
        NG: 'Nigeria'.t(),
        NU: 'Niue'.t(),
        NF: 'Norfolk Island'.t(),
        MP: 'Northern Mariana Islands'.t(),
        NO: 'Norway'.t(),
        OM: 'Oman'.t(),
        PK: 'Pakistan'.t(),
        PW: 'Palau'.t(),
        PS: 'Palestine, State of'.t(),
        PA: 'Panama'.t(),
        PG: 'Papua New Guinea'.t(),
        PY: 'Paraguay'.t(),
        PE: 'Peru'.t(),
        PH: 'Philippines'.t(),
        PN: 'Pitcairn'.t(),
        PL: 'Poland'.t(),
        PT: 'Portugal'.t(),
        PR: 'Puerto Rico'.t(),
        QA: 'Qatar'.t(),
        RE: 'Reunion'.t(),
        RO: 'Romania'.t(),
        RU: 'Russian Federation'.t(),
        RW: 'Rwanda'.t(),
        BL: 'Saint Barthelemy'.t(),
        SH: 'Saint Helena, Ascension and Tristan da Cunha'.t(),
        KN: 'Saint Kitts and Nevis'.t(),
        LC: 'Saint Lucia'.t(),
        MF: 'Saint Martin (French part)'.t(),
        PM: 'Saint Pierre and Miquelon'.t(),
        VC: 'Saint Vincent and the Grenadines'.t(),
        WS: 'Samoa'.t(),
        SM: 'San Marino'.t(),
        ST: 'Sao Tome and Principe'.t(),
        SA: 'Saudi Arabia'.t(),
        SN: 'Senegal'.t(),
        RS: 'Serbia'.t(),
        SC: 'Seychelles'.t(),
        SL: 'Sierra Leone'.t(),
        SG: 'Singapore'.t(),
        SX: 'Sint Maarten (Dutch part)'.t(),
        SK: 'Slovakia'.t(),
        SI: 'Slovenia'.t(),
        SB: 'Solomon Islands'.t(),
        SO: 'Somalia'.t(),
        ZA: 'South Africa'.t(),
        GS: 'South Georgia and the South Sandwich Islands'.t(),
        SS: 'South Sudan'.t(),
        ES: 'Spain'.t(),
        LK: 'Sri Lanka'.t(),
        SD: 'Sudan'.t(),
        SR: 'Suriname'.t(),
        SJ: 'Svalbard and Jan Mayen'.t(),
        SZ: 'Swaziland'.t(),
        SE: 'Sweden'.t(),
        CH: 'Switzerland'.t(),
        SY: 'Syrian Arab Republic'.t(),
        TW: 'Taiwan, Province of China'.t(),
        TJ: 'Tajikistan'.t(),
        TZ: 'Tanzania, United Republic of'.t(),
        TH: 'Thailand'.t(),
        TL: 'Timor-Leste'.t(),
        TG: 'Togo'.t(),
        TK: 'Tokelau'.t(),
        TO: 'Tonga'.t(),
        TT: 'Trinidad and Tobago'.t(),
        TN: 'Tunisia'.t(),
        TR: 'Turkey'.t(),
        TM: 'Turkmenistan'.t(),
        TC: 'Turks and Caicos Islands'.t(),
        TV: 'Tuvalu'.t(),
        UG: 'Uganda'.t(),
        UA: 'Ukraine'.t(),
        AE: 'United Arab Emirates'.t(),
        GB: 'United Kingdom'.t(),
        US: 'United States'.t(),
        UM: 'United States Minor Outlying Islands'.t(),
        UY: 'Uruguay'.t(),
        UZ: 'Uzbekistan'.t(),
        VU: 'Vanuatu'.t(),
        VE: 'Venezuela, Bolivarian Republic of'.t(),
        VN: 'Viet Nam'.t(),
        VG: 'Virgin Islands, British'.t(),
        VI: 'Virgin Islands, U.S.'.t(),
        WF: 'Wallis and Futuna'.t(),
        EH: 'Western Sahara'.t(),
        YE: 'Yemen'.t(),
        ZM: 'Zambia'.t(),
        ZW: 'Zimbabwe'.t(),
    },
});
