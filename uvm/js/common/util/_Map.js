Ext.define('Ung.util.Map', {
    singleton: true,
    alternateClassName: 'Map',

    policies: {
        1: 'Default'
    },

    init: function () {
        this.buildInterfacesMap();
        this.buildPoliciesMap();
    },

    buildInterfacesMap: function () {
        var interfaces, map = {};
        if (rpc.reportsManager) {
            interfaces = Rpc.directData('rpc.reportsManager.getInterfacesInfo').list;
            Ext.Array.each(interfaces, function (intf) {
                map[intf.interfaceId] = intf.name;
            });
        }
        this.interfaces = map;
    },

    buildPoliciesMap: function () {
        var policies,
            map = { 1: 'Default' };

        if (rpc.reportsManager) {
            policies = Rpc.directData('rpc.reportsManager.getPoliciesInfo');
            if (policies) {
                Ext.Array.each(policies, function (policy) {
                    // map[intf.interfaceId] = intf.name;
                });
            }
        }
        this.policies = map;
    },

    /**
     * used for setting the grid columns
     * map containing all possible grid columns with db tables fields as key
     * this are matching 1-1 with the model fields
     */
    columns: {
        action:               { text: 'Action'.t(), width: 100 },
        active_hosts:         { text: 'Active Hosts'.t(), filter: Rndr.filters.numeric, width: 100 },
        addr:                 { text: 'Receiver'.t(), width: 120 },
        addr_kind:            { text: 'Address Kind'.t(), width: 120 },
        addr_name:            { text: 'Address Name'.t(), width: 120 },
        address:              { text: 'Address'.t(), width: 120 },
        auth_type:            { text: 'Auth Type'.t(), width: 120 },
        blocked:              { text: 'Blocked'.t(), filter: Rndr.filters.boolean, width: Rndr.colW.boolean,  renderer: Rndr.boolean },
        bypassed:             { text: 'Bypassed'.t(), filter: Rndr.filters.boolean, width: Rndr.colW.boolean, renderer: Rndr.boolean },
        bypasses:             { text: 'Bypass Count'.t(), filter: Rndr.filters.numeric, width: 80 },
        c2p_bytes:            { text: 'From-Client Bytes'.t(), filter: Rndr.filters.numeric, width: 80, align: 'right', renderer: Renderer.datasize },
        c2s_bytes:            { text: 'From-Client Bytes'.t(), filter: Rndr.filters.numeric, width: 80, align: 'right', renderer: Renderer.datasize },
        c2s_content_length:   { text: 'Upload Content Length'.t(), filter: Rndr.filters.numeric, width: 120 },
        c_client_addr:        { text: 'Client'.t(), filter: Rndr.filters.string, width: 120 },
        c_client_port:        { text: 'Client Port'.t(), filter: Rndr.filters.numeric, width: 120 },
        c_server_addr:        { text: 'Original Server'.t(), filter: Rndr.filters.string, width: 120 },
        c_server_port:        { text: 'Original Server Port'.t(), filter: Rndr.filters.numeric, width: 120 },
        category:             { text: 'Category'.t(), width: 100 },
        classtype:            { text: 'Classtype'.t(), width: 100 },
        class_id:             { text: 'Cid'.t(), filter: Rndr.filters.numeric, width: 100 },
        client_addr:          { text: 'Client Address'.t(), width: 120 },
        client_address:       { text: 'Client Address'.t(), width: 120 },
        client_country:       { text: 'Client Country'.t(), width: 120 }, // converter
        client_intf:          { text: 'Client Interface'.t(), width: 100 }, // converter
        client_latitude:      { text: 'Client Latitude'.t(), filter: Rndr.filters.numeric, width: 120 },
        client_longitude:     { text: 'Client Longitude'.t(), filter: Rndr.filters.numeric, width: 120 },
        client_name:          { text: 'Client Name'.t(), width: 120 },
        client_protocol:      { text: 'Client Protocol'.t(), width: 120 },
        client_username:      { text: 'Client Username'.t(), width: 120 },
        connect_stamp:        { text: 'Login Time'.t(), filter: Rndr.filters.date, width: 120 },
        cpu_system:           { text: 'CPU System Utilization'.t(), filter: Rndr.filters.numeric, width: 100 },
        cpu_user:             { text: 'CPU User Utilization'.t(), filter: Rndr.filters.numeric, width: 100 },
        description:          { text: 'Description'.t(), width: 200 }, // multiple column names!!!
        destination:          { text: 'Destination'.t(), width: 200 },
        dest_addr:            { text: 'Destination Address'.t(), width: 200 },
        dest_port:            { text: 'Destination Port'.t(), filter: Rndr.filters.numeric, width: 200 },
        disk_free:            { text: 'Disk Free'.t(), filter: Rndr.filters.numeric, width: 100, align: 'right', renderer: Rndr.disk },
        disk_total:           { text: 'Disk Total'.t(), filter: Rndr.filters.numeric, width: 100, align: 'right', renderer: Rndr.disk },
        domain:               { text: 'Domain'.t(), width: 120 },
        elapsed_time:         { text: 'Elapsed'.t(), filter: Rndr.filters.numeric, width: 160 }, // converter
        end_time:             { text: 'End Time'.t(), filter: Rndr.filters.date, width: 160 }, // converter
        entitled:             { text: 'Entitled'.t(), filter: Rndr.filters.boolean, width: Rndr.colW.boolean, renderer: Rndr.boolean },
        entity:               { text: 'Address'.t(), width: 80 },
        event_id:             { text: 'Event Id'.t(), filter: Rndr.filters.numeric, width: 120 },
        event_info:           { text: 'Event Info'.t(), width: 120 },
        event_type:           { text: 'Type'.t(), width: 120 },
        filter_prefix:        { text: 'Filter Prefix'.t(), width: 80 },
        flagged:              { text: 'Flagged'.t(), filter: Rndr.filters.boolean, filter: Rndr.filters.boolean, width: Rndr.colW.boolean, renderer: Rndr.boolean },
        gen_id:               { text: 'Gid'.t(), filter: Rndr.filters.numeric, width: 100 },
        goodbye_stamp:        { text: 'Logout Time'.t(), filter: Rndr.filters.date, width: 100 },
        hits:                 { text: 'Hit Count'.t(), filter: Rndr.filters.numeric, width: 250 },
        hit_bytes:            { text: 'Hit Bytes'.t(), filter: Rndr.filters.numeric, width: 250 },
        host:                 { text: 'Host'.t(), width: 250 },
        hostname:             { text: 'Hostname'.t(), width: 120 },
        icmp_type:            { text: 'ICMP Type'.t(), width: 150 }, // converter
        in_bytes:             { text: 'In Bytes'.t(), filter: Rndr.filters.numeric, width: 200 },
        ipaddr:               { text: 'Sender'.t(), width: 200 }, // converter
        json:                 { text: 'JSON'.t(), flex: 1 },
        key:                  { text: 'Key'.t(), width: 120 },
        load_1:               { text: 'Load (1-minute)'.t(), filter: Rndr.filters.numeric, width: 100, align: 'right' },
        load_5:               { text: 'Load (5-minute)'.t(), filter: Rndr.filters.numeric, width: 80, align: 'right' },
        load_15:              { text: 'Load (15-minute)'.t(), filter: Rndr.filters.numeric, width: 80, align: 'right' },
        local:                { text: 'Local'.t(), filter: Rndr.filters.boolean, width: 100, renderer: Rndr.localLogin },
        local_addr:           { text: 'Local Address'.t(), width: 120 },
        local_address:        { text: 'Local Address'.t(), width: 120 },
        login:                { text: 'Login'.t(), width: 100},
        login_name:           { text: 'Login'.t(), width: 100},
        mac_address:          { text: 'MAC Address'.t(), width: 120},
        mem_free:             { text: 'Memory Free'.t(), filter: Rndr.filters.numeric, width: 100, align: 'right', renderer: Rndr.memory },
        mem_total:            { text: 'Memory Total'.t(), filter: Rndr.filters.numeric, width: 100, align: 'right', renderer: Rndr.memory },
        method:               { text: 'Method'.t(), width: 120 }, // converter
        misses:               { text: 'Miss Count'.t(), filter: Rndr.filters.numeric, width: 100 },
        miss_bytes:           { text: 'Miss Bytes'.t(), filter: Rndr.filters.numeric, width: 120 },
        msg:                  { text: 'Msg'.t(), width: 120 },
        msg_id:               { text: 'Message Id'.t(), width: 120 },
        name:                 { text: 'Interface Name'.t(), width: 120 },
        net_interface:        { text: 'Interface'.t(), width: 120 },
        net_process:          { text: 'Process'.t(), width: 120 },
        old_value:            { text: 'Old Value'.t(), width: 120 },
        os_name:              { text: 'Interface OS'.t(), width: 120 },
        out_bytes:            { text: 'Out Bytes'.t(), filter: Rndr.filters.numeric, width: 100 },
        p2c_bytes:            { text: 'To-Client Bytes'.t(), filter: Rndr.filters.numeric, width: 80, align: 'right', renderer: Renderer.datasize },
        p2s_bytes:            { text: 'To-Server Bytes'.t(), filter: Rndr.filters.numeric, width: 80, align: 'right', renderer: Renderer.datasize },
        policy_id:            { text: 'Policy Id'.t(), width: 120}, // converter
        policy_rule_id:       { text: 'Policy Rule'.t(), width: 100},
        pool_address:         { text: 'Pool Address'.t(), width: 100},
        protocol:             { text: 'Protocol'.t(), filter: Rndr.filters.numeric, width: 80 }, // converter
        reason:               { text: 'Reason'.t(), width: 100 }, // converter
        receiver:             { text: 'Receiver'.t(), width: 100 },
        referer:              { text: 'Referer'.t(), width: 120 },
        remote_addr:          { text: 'Remote Address'.t(), width: 120 },
        remote_address:       { text: 'Remote Address'.t(), width: 120 },
        remote_port:          { text: 'Remote Port'.t(), filter: Rndr.filters.numeric, width: 120 },
        request_id:           { text: 'Request Id'.t(), filter: Rndr.filters.numeric, width: 120 },
        rid:                  { text: 'Rid'.t(), width: 120 },
        rx_bytes:             { text: 'RX Bytes'.t(), filter: Rndr.filters.numeric, width: 120 },
        rx_rate:              { text: 'RX Rate'.t(), filter: Rndr.filters.numeric, width: 120 },
        s2c_bytes:            { text: 'From-Server Bytes'.t(), filter: Rndr.filters.numeric, width: 80, align: 'right', renderer: Renderer.datasize },
        s2c_content_filename: { text: 'Content Filename'.t(), width: 160 },
        s2c_content_length:   { text: 'Download Content Length'.t(), filter: Rndr.filters.numeric, width: 120 },
        s2c_content_type:     { text: 'Content Type'.t(), width: 120 },
        s2p_bytes:            { text: 'From-Server Bytes'.t(), filter: Rndr.filters.numeric, width: 80, align: 'right', renderer: Renderer.datasize },
        s_client_addr:        { text: 'New Client'.t(), filter: Rndr.filters.string, width: 120 },
        s_client_port:        { text: 'New Client Port'.t(), filter: Rndr.filters.numeric, width: 120 },
        s_server_addr:        { text: 'Server'.t(), filter: Rndr.filters.string, width: 120 },
        s_server_port:        { text: 'Server Port'.t(), filter: Rndr.filters.numeric, width: 120 },
        sender:               { text: 'Sender', width: 100 },
        server_address:       { text: 'Server Address'.t(), width: 120 },
        server_country:       { text: 'Server Country'.t(), width: 120 }, // converter
        server_intf:          { text: 'Server Interface'.t(), width: 100 }, // converter
        server_latitude:      { text: 'Server Latitude'.t(), filter: Rndr.filters.numeric, width: 120 },
        server_longitude:     { text: 'Server Longitude'.t(), filter: Rndr.filters.numeric, width: 120},
        session_id:           { text: 'Session Id'.t(), filter: Rndr.filters.numeric, width: 120 },
        settings_file:        { text: 'Settings File'.t(), width: 200, renderer: Rndr.settingsFile },
        sig_id:               { text: 'Sid', filter: Rndr.filters.numeric, width: 100 },
        size:                 { text: 'Size', filter: Rndr.filters.numeric, width: 100 },
        source_addr:          { text: 'Source Address'.t(), width: 120 },
        source_port:          { text: 'Source Port'.t(), filter: Rndr.filters.numeric, width: 120 },
        start_time:           { text: 'Start Time'.t(), filter: Rndr.filters.date, width: 160 }, // converter
        subject:              { text: 'Subject'.t(), width: 120 },
        succeeded:            { text: 'Succeeded'.t(), filter: Rndr.filters.boolean, width: Rndr.colW.boolean, renderer: Rndr.boolean },
        success:              { text: 'Success'.t(), filter: Rndr.filters.boolean, width: Rndr.colW.boolean, renderer: Rndr.boolean },
        summary_text:         { text: 'Summary'.t(), width: 200 },
        swap_free:            { text: 'Swap Free'.t(), filter: Rndr.filters.numeric, width: 100, align: 'right', renderer: Rndr.memory },
        swap_total:           { text: 'Swap Total'.t(), filter: Rndr.filters.numeric, width: 100, align: 'right', renderer: Rndr.memory },
        systems:              { text: 'System Count'.t(), filter: Rndr.filters.numeric, width: 160 },
        tags:                 { text: 'Tags'.t(), width: 160 },
        term:                 { text: 'Query Term'.t(), width: 160 },
        time_stamp:           { text: 'Timestamp'.t(), filter: Rndr.filters.date, width: 160 }, // converter
        tunnel_description:   { text: 'Tunnel Description'.t(), width: 160 },
        tunnel_name:          { text: 'Tunnel Name'.t(), width: 160 },
        tx_bytes:             { text: 'TX Bytes'.t(), filter: Rndr.filters.numeric, width: 80 },
        tx_rate:              { text: 'TX Rate'.t(), filter: Rndr.filters.numeric, width: 80 },
        type:                 { text: 'Type'.t(), width: 160 },
        uri:                  { text: 'URI'.t(), width: 120 },
        username:             { text: 'Username'.t(), width: 120 },
        value:                { text: 'Value'.t(), width: 120 },
        vendor_name:          { text: 'Vendor Name'.t(), width: 200 },

        // applications related columns
        ad_blocker_action:                   { text: 'Action'.t() +  ' (Ad Blocker)', width: 80, renderer: Rndr.adBlockerAction },
        ad_blocker_cookie_ident:             { text: 'Blocked Cookie'.t() + ' (Ad Blocker)', width: 120 },

        application_control_application:     { text: 'Application'.t() + ' (Application Control)', width: 120 },
        application_control_blocked:         { text: 'Blocked'.t() + ' (Application Control)', filter: Rndr.filters.boolean, width: Rndr.colW.boolean, renderer: Rndr.boolean },
        application_control_category:        { text: 'Category'.t() + ' (Application Control)', width: 120 },
        application_control_confidence:      { text: 'Confidence'.t() + ' (Application Control)', filter: Rndr.filters.numeric, width: 120 },
        application_control_detail:          { text: 'Detail'.t() + ' (Application Control)', width: 120 },
        application_control_flagged:         { text: 'Flagged'.t() + ' (Application Control)', filter: Rndr.filters.boolean, width: Rndr.colW.boolean },
        application_control_protochain:      { text: 'Protochain'.t() + ' (Application Control)', width: 120 },
        application_control_ruleid:          { text: 'Rule'.t() + ' (Application Control)', filter: Rndr.filters.numeric, width: 120 },

        application_control_lite_blocked:    { text: 'Blocked'.t() + ' (Application Control Lite)', filter: Rndr.filters.boolean, width: Rndr.colW.boolean, renderer: Rndr.boolean },
        application_control_lite_protocol:   { text: 'Protocol'.t() + ' (Application Control Lite)', width: 120 },

        bandwidth_control_priority:          { text: 'Priority'.t() + ' (Bandwidth Control)', width: 120, renderer: Rndr.priority },
        bandwidth_control_rule:              { text: 'Rule'.t() + ' (Bandwidth Control)', width: 120, renderer: Rndr.bandwidthControlRule },

        captive_portal_blocked:              { text: 'Blocked'.t() + ' (Captive Portal)', filter: Rndr.filters.boolean, width: Rndr.colW.boolean, renderer: Rndr.boolean },
        captive_portal_rule_index:           { text: 'Rule Id'.t() + ' (Captive Portal)', filter: Rndr.filters.numeric, width: 120 },

        firewall_blocked:                    { text: 'Blocked'.t() + ' (Firewall)', filter: Rndr.filters.boolean, width: Rndr.colW.boolean, renderer: Rndr.boolean },
        firewall_flagged:                    { text: 'Flagged'.t() + ' (Firewall)', filter: Rndr.filters.boolean, width: Rndr.colW.boolean, renderer: Rndr.boolean },
        firewall_rule_index:                 { text: 'Rule'.t() + ' (Firewall)', filter: Rndr.filters.numeric, width: 120 },

        phish_blocker_action:                { text: 'Action'.t() + ' (Phish Blocker)', width: 120 }, // converter
        phish_blocker_is_spam:               { text: 'Is Spam'.t() + ' (Phish Blocker)', filter: Rndr.filters.boolean, width: Rndr.colW.boolean, renderer: Rndr.boolean },
        phish_blocker_score:                 { text: 'Score'.t() + ' (Phish Blocker)', filter: Rndr.filters.numeric, width: 120 },
        phish_blocker_tests_string:          { text: 'Detail'.t() + ' (Phish Blocker)', width: 120 },

        spam_blocker_action:                 { text: 'Action'.t() + ' (Spam Blocker)', width: 120 },
        spam_blocker_is_spam:                { text: 'Is Spam'.t() + ' (Spam Blocker)', filter: Rndr.filters.boolean, width: Rndr.colW.boolean, renderer: Rndr.boolean },
        spam_blocker_score:                  { text: 'Spam Score'.t() + ' (Spam Blocker)', filter: Rndr.filters.numeric, width: 120 },
        spam_blocker_tests_string:           { text: 'Detail'.t() + ' (Spam Blocker)', width: 120 },

        spam_blocker_lite_action:            { text: 'Action'.t() + ' (Spam Blocker Lite)', width: 120},
        spam_blocker_lite_is_spam:           { text: 'Is Spam'.t() + ' (Spam Blocker Lite)', filter: Rndr.filters.boolean, width: Rndr.colW.boolean, renderer: Rndr.boolean },
        spam_blocker_lite_score:             { text: 'Spam Score'.t() + ' (Spam Blocker Lite)', filter: Rndr.filters.numeric, width: 120 },
        spam_blocker_lite_tests_string:      { text: 'Detail'.t() + ' (Spam Blocker Lite)', width: 120 },

        ssl_inspector_detail:                { text: 'Detail'.t() + ' (SSL Inspector)', width: 120 },
        ssl_inspector_ruleid:                { text: 'Rule Id'.t() + ' (SSL Inspector)', filter: Rndr.filters.numeric, width: 120 },
        ssl_inspector_status:                { text: 'Status'.t() + ' (SSL Inspector)', width: 120 },

        threat_prevention_blocked:           { text: 'Blocked'.t() + ' (Threat Prevention)', filter: Rndr.filters.boolean, width: Rndr.colW.boolean, renderer: Rndr.boolean },
        threat_prevention_categories:        { text: 'Categories'.t() + ' (Threat Prevention)', width: 120 },
        threat_prevention_client_categories: { text: 'Client Categories'.t() + ' (Threat Prevention)', width: 100 },
        threat_prevention_client_reputation: { text: 'Client Reputation'.t() + ' (Threat Prevention)', width: 100 },
        threat_prevention_flagged:           { text: 'Flagged'.t() + ' (Threat Prevention)', filter: Rndr.filters.boolean, width: Rndr.colW.boolean, renderer: Rndr.boolean },
        threat_prevention_reason:            { text: 'Reason'.t() + ' (Threat Prevention)', width: 100 },
        threat_prevention_reputation:        { text: 'Reputation'.t() + ' (Threat Prevention)', width: 120 },
        threat_prevention_rule_id:           { text: 'Rule Id'.t() + ' (Threat Prevention)', width: 120 },
        threat_prevention_server_categories: { text: 'Server Categories'.t() + ' (Threat Prevention)', width: 100 },
        threat_prevention_server_reputation: { text: 'Server Reputation'.t() + ' (Threat Prevention)', width: 100 },

        virus_blocker_clean:                 { text: 'Clean'.t() + ' (Virus Blocker)', filter: Rndr.filters.boolean, width: Rndr.colW.boolean, renderer: Rndr.boolean },
        virus_blocker_name:                  { text: 'Name'.t() + ' (Virus Blocker)', width: 120 },

        virus_blocker_lite_clean:            { text: 'Clean'.t() + ' (Virus Blocker Lite)', filter: Rndr.filters.boolean, width: Rndr.colW.boolean, renderer: Rndr.boolean },
        virus_blocker_lite_name:             { text: 'Name'.t() + ' (Virus Blocker Lite)', width: 120 },

        web_filter_blocked:                  { text: 'Blocked'.t() + ' (Web Filter)', filter: Rndr.filters.boolean, width: Rndr.colW.boolean, renderer: Rndr.boolean },
        web_filter_category_id:              { text: 'Web Category'.t() + ' (Web Filter)', width: 250 }, // converter
        web_filter_flagged:                  { text: 'Flagged'.t() + ' (Web Filter)', filter: Rndr.filters.boolean, width: Rndr.colW.boolean, renderer: Rndr.boolean },
        web_filter_reason:                   { text: 'Reason For Action'.t() + ' (Web Filter)', width: 120 },
        web_filter_rule_id:                  { text: 'Web Rule'.t() + ' (Web Filter)', width: 120 } // converter not implemented
    },

    /**
     * used for setting the grid store model
     * map containing all possible store fields with db tables fields as key
     * this are matching 1-1 with the columns above
     */
    fields: {
        action: {               type: 'string' },
        active_hosts: {         type: 'integer' },
        addr: {                 type: 'string'  },
        addr_kind: {            type: 'string'  },
        addr_name: {            type: 'string'  },
        address: {              type: 'string'  },
        auth_type: {            type: 'string'  }, // captive_portal_user
        blocked: {              type: 'boolean' },
        bypassed: {             type: 'boolean' },
        bypasses: {             type: 'integer' },
        c2p_bytes: {            type: 'integer' },
        c2s_bytes: {            type: 'integer' },
        c2s_content_length: {   type: 'integer' },
        c_client_addr: {        type: 'string'  },
        c_client_port: {        type: 'integer' },
        c_server_addr: {        type: 'string'  },
        c_server_port: {        type: 'integer' },
        category: {             type: 'string'  },
        classtype: {            type: 'string' },
        class_id: {             type: 'integer'  },
        client_addr: {          type: 'string'  },
        client_address: {       type: 'string'  },
        client_country: {       type: 'string',  convert: Converter.country },
        client_intf: {          type: 'integer', convert: Converter.interface },
        client_latitude: {      type: 'string'  },
        client_longitude: {     type: 'string'  },
        client_name: {          type: 'string'  },
        client_protocol: {      type: 'string'  },
        client_username: {      type: 'string'  },
        connect_stamp: {        type: 'auto',    convert: Converter.timestamp },
        cpu_system: {           type: 'number'  },
        cpu_user: {             type: 'number'  },
        description: {          type: 'string'  },
        destination: {          type: 'string'  }, // configuration_backup
        dest_addr: {            type: 'string'  },
        dest_port: {            type: 'integer'  },
        disk_free: {            type: 'integer' },
        disk_total: {           type: 'integer' },
        domain: {               type: 'string'  },
        elapsed_time: {         type: 'auto',    convert: Converter.timestamp },
        end_time: {             type: 'auto',    convert: Converter.timestamp },
        entitled: {             type: 'boolean' },
        entity: {               type: 'string' },
        event_id: {             type: 'integer'  },
        event_info: {           type: 'string'  }, // captive_portal_user
        event_type: {           type: 'string'  },
        filter_prefix: {        type: 'string'  },
        flagged: {              type: 'boolean' },
        gen_id: {               type: 'integer'  },
        goodbye_stamp: {        type: 'auto',    convert: Converter.timestamp },
        hits: {                 type: 'integer'  },
        hit_bytes: {            type: 'integer'  },
        host: {                 type: 'string'  },
        hostname: {             type: 'string'  },
        icmp_type: {            type: 'integer', convert: Converter.icmp },
        in_bytes: {             type: 'string'  },
        ipaddr: {               type: 'string'  },
        json: {                 type: 'string'  },
        key: {                  type: 'string'  },
        load_1: {               type: 'number'  },
        load_5: {               type: 'number'  },
        load_15: {              type: 'number'  },
        local: {                type: 'boolean' },
        local_addr: {           type: 'string'  },
        local_address: {        type: 'string'  },
        login: {                type: 'string'  },
        login_name: {           type: 'string'  }, // captive_portal_user
        mac_address: {          type: 'string'  },
        mem_free: {             type: 'integer' },
        mem_total: {            type: 'integer' },
        method: {               type: 'string',  convert: Converter.httpMethod },
        misses: {               type: 'integer'  },
        miss_bytes: {           type: 'integer'  },
        msg: {                  type: 'string'  },
        msg_id: {               type: 'string'  },
        name: {                 type: 'string'  },
        net_interface: {        type: 'string'  },
        net_process: {          type: 'string'  },
        old_value: {            type: 'string'  },
        os_name: {              type: 'string'  },
        out_bytes: {            type: 'integer'  },
        p2c_bytes: {            type: 'integer' },
        p2s_bytes: {            type: 'integer' },
        policy_id: {            type: 'integer', convert: Converter.policy },
        policy_rule_id: {       type: 'integer' },
        pool_address: {         type: 'string'  },
        protocol: {             type: 'integer', convert: Converter.protocol },
        reason: {               type: 'string',  convert: Converter.loginFailure },
        receiver: {             type: 'string'  },
        referer: {              type: 'string'  },
        remote_addr: {          type: 'string'  },
        remote_address: {       type: 'string'  },
        remote_port: {          type: 'integer'  },
        request_id: {           type: 'number'  },
        rid: {                  type: 'string'  },
        rx_bytes: {             type: 'string'  },
        rx_rate: {              type: 'number'  },
        s2c_bytes: {            type: 'integer' },
        s2c_content_filename: { type: 'string'  },
        s2c_content_length: {   type: 'integer' },
        s2c_content_type: {     type: 'string'  },
        s2p_bytes: {            type: 'integer' },
        s_client_addr: {        type: 'string'  },
        s_client_port: {        type: 'integer' },
        s_server_addr: {        type: 'string'  },
        s_server_port: {        type: 'integer' },
        sender: {               type: 'string'  },
        server_address: {       type: 'string' },
        server_country: {       type: 'string',  convert: Converter.country },
        server_intf: {          type: 'integer', convert: Converter.interface },
        server_latitude: {      type: 'string'  },
        server_longitude: {     type: 'string'  },
        session_id: {           type: 'number'  },
        settings_file: {        type: 'string'  },
        sig_id: {               type: 'integer' },
        size: {                 type: 'integer' },
        source_addr: {          type: 'string' },
        source_port: {          type: 'integer' },
        start_time: {           type: 'auto',    convert: Converter.timestamp },
        subject: {              type: 'string'  },
        succeeded: {            type: 'boolean' },
        success: {              type: 'boolean' }, // configuration_backup
        summary_text: {         type: 'string'  },
        swap_free: {            type: 'integer' },
        swap_total: {           type: 'integer' },
        systems: {              type: 'integer' },
        tags: {                 type: 'string'  },
        term: {                 type: 'string'  },
        time_stamp: {           type: 'auto',    convert: Converter.timestamp },
        tunnel_description: {   type: 'string'  },
        tunnel_name: {          type: 'string'  },
        tx_bytes: {             type: 'string'  },
        tx_rate: {              type: 'number'  },
        type: {                 type: 'string'  }, // directory_connector
        uri: {                  type: 'string'  },
        username: {             type: 'string'  },
        value: {                type: 'string'  },
        vendor_name: {          type: 'string'  },

        // applications related fields
        ad_blocker_action: {       type: 'string' },
        ad_blocker_cookie_ident: { type: 'string' },

        application_control_application: { type: 'string' },
        application_control_blocked: {     type: 'boolean' },
        application_control_category: {    type: 'string' },
        application_control_confidence: {  type: 'integer' },
        application_control_detail: {      type: 'string' },
        application_control_flagged: {     type: 'boolean' },
        application_control_protochain: {  type: 'string' },
        application_control_ruleid: {      type: 'integer' },

        application_control_lite_blocked: {  type: 'boolean' },
        application_control_lite_protocol: { type: 'string' }, // ?? why as text in DB, no conversion

        bandwidth_control_priority: { type: 'integer' },
        bandwidth_control_rule: {     type: 'integer' },

        captive_portal_blocked: {    type: 'boolean' },
        captive_portal_rule_index: { type: 'integer' },

        firewall_blocked: {    type: 'boolean' },
        firewall_flagged: {    type: 'boolean' },
        firewall_rule_index: { type: 'integer' },

        phish_blocker_action: {       type: 'string', convert: Converter.emailAction },
        phish_blocker_is_spam: {      type: 'boolean' },
        phish_blocker_score: {        type: 'number' },
        phish_blocker_tests_string: { type: 'string' },

        spam_blocker_action: {       type: 'string', convert: Converter.emailAction },
        spam_blocker_is_spam: {      type: 'boolean' },
        spam_blocker_score: {        type: 'number' },
        spam_blocker_tests_string: { type: 'string' },

        spam_blocker_lite_action: {       type: 'string', convert: Converter.emailAction },
        spam_blocker_lite_is_spam: {      type: 'boolean' },
        spam_blocker_lite_score: {        type: 'number' },
        spam_blocker_lite_tests_string: { type: 'string' },

        ssl_inspector_detail: { type: 'string' },
        ssl_inspector_ruleid: { type: 'integer' },
        ssl_inspector_status: { type: 'string' },

        threat_prevention_blocked: {           type: 'boolean' },
        threat_prevention_categories: {        type: 'integer' },
        threat_prevention_client_categories: { type: 'integer' },
        threat_prevention_client_reputation: { type: 'integer' },
        threat_prevention_flagged: {           type: 'boolean' },
        threat_prevention_reason: {            type: 'string' },
        threat_prevention_reputation: {        type: 'integer' },
        threat_prevention_rule_id: {           type: 'integer' },
        threat_prevention_server_categories: { type: 'integer' },
        threat_prevention_server_reputation: { type: 'integer' },

        virus_blocker_clean: { type: 'boolean' },
        virus_blocker_name: {  type: 'string' },

        virus_blocker_lite_clean: { type: 'boolean' },
        virus_blocker_lite_name: {  type: 'string' },

        web_filter_blocked: {     type: 'boolean' },
        web_filter_category_id: { type: 'integer', convert: Converter.webCategory },
        web_filter_flagged: {     type: 'boolean' },
        web_filter_reason: {      type: 'string', convert: Converter.webReason },
        web_filter_rule_id: {     type: 'integer' }
    },

    /**
     * all tables with corresponding fields as defined in db
     * the fields are used to determine the store model field and the grid column
     */
    tables: {
        admin_logins: ['time_stamp', 'login', 'local', 'client_addr', 'succeeded', 'reason'],
        alerts: ['time_stamp', 'description', 'summary_text', 'json'],
        captive_portal_user_events: ['time_stamp', 'policy_id', 'event_id', 'login_name', 'event_info', 'auth_type', 'client_addr'],
        configuration_backup_events: ['time_stamp', 'success', 'description', 'destination', 'event_id'],
        device_table_updates: ['time_stamp', 'mac_address', 'key', 'value', 'old_value'],
        directory_connector_login_events: ['time_stamp', 'login_name', 'domain', 'type', 'client_addr'],
        ftp_events: ['time_stamp', 'event_id', 'session_id', 'client_intf', 'server_intf', 'c_client_addr', 's_client_addr', 'c_server_addr', 's_server_addr', 'policy_id', 'username', 'hostname', 'request_id', 'method', 'uri'],
        host_table_updates: ['time_stamp', 'address', 'key', 'value', 'old_value'],
        interface_stat_events: ['time_stamp', 'interface_id', 'rx_rate', 'rx_bytes', 'tx_rate', 'tx_bytes'],
        ipsec_user_events: ['event_id', 'time_stamp', 'connect_stamp', 'goodbye_stamp', 'client_address', 'client_protocol', 'client_username', 'net_process', 'net_interface', 'elapsed_time', 'rx_bytes', 'tx_bytes'],
        ipsec_vpn_events: ['event_id', 'time_stamp', 'local_address', 'remote_address', 'tunnel_description', 'event_type'],
        ipsec_tunnel_stats: ['time_stamp', 'tunnel_name', 'in_bytes', 'out_bytes', 'event_id'],
        intrusion_prevention_events: ['time_stamp', 'sig_id', 'gen_id', 'class_id', 'source_addr', 'source_port', 'dest_addr', 'dest_port', 'protocol', 'blocked', 'category', 'classtype', 'msg', 'rid',],
        openvpn_events: ['time_stamp', 'remote_address', 'pool_address', 'client_name', 'type'],
        openvpn_stats: ['time_stamp', 'start_time', 'end_time', 'rx_bytes', 'tx_bytes', 'remote_address', 'pool_address', 'remote_port', 'client_name', 'event_id'],
        quotas: ['time_stamp', 'entity', 'action', 'size', 'reason'],
        server_events: ['time_stamp', 'load_1', 'load_5', 'load_15', 'cpu_user', 'cpu_system', 'mem_total', 'mem_free', 'disk_total', 'disk_free', 'swap_total', 'swap_free', 'active_hosts'],
        settings_changes: ['time_stamp', 'settings_file', 'username', 'hostname'],
        smtp_tarpit_events: ['time_stamp', 'ipaddr', 'hostname', 'policy_id', 'vendor_name', 'event_id'],
        tunnel_vpn_events: ['event_id', 'time_stamp', 'tunnel_name', 'server_address', 'local_address', 'event_type'],
        tunnel_vpn_stats: ['time_stamp', 'tunnel_name', 'in_bytes', 'out_bytes', 'event_id'],
        user_table_updates: ['time_stamp', 'username', 'key', 'value', 'old_value'],
        wan_failover_action_events: ['time_stamp', 'interface_id', 'action', 'os_name', 'name', 'event_id'],
        wan_failover_test_events: ['time_stamp', 'interface_id', 'name', 'description', 'success', 'event_id'],
        web_cache_stats: ['time_stamp', 'hits', 'misses', 'bypasses', 'systems', 'hit_bytes', 'miss_bytes', 'event_id'],
        http_events: [
            'request_id',
            'time_stamp',
            'session_id',
            'client_intf',
            'server_intf',
            'c_client_addr',
            's_client_addr',
            'c_server_addr',
            's_server_addr',
            'c_client_port',
            's_client_port',
            'c_server_port',
            's_server_port',
            'client_country',
            'client_latitude',
            'client_longitude',
            'server_country',
            'server_latitude',
            'server_longitude',
            'policy_id',
            'username',
            'hostname',
            'method',
            'uri',
            'host',
            'domain',
            'referer',
            'c2s_content_length',
            's2c_content_length',
            's2c_content_type',
            's2c_content_filename',
            'ad_blocker_cookie_ident',
            'ad_blocker_action',
            'web_filter_reason',
            'web_filter_category_id',
            'web_filter_rule_id',
            'web_filter_blocked',
            'web_filter_flagged',
            'virus_blocker_lite_clean',
            'virus_blocker_lite_name',
            'virus_blocker_clean',
            'virus_blocker_name',
            'threat_prevention_blocked',
            'threat_prevention_flagged',
            'threat_prevention_rule_id',
            'threat_prevention_reputation',
            'threat_prevention_categories'
        ],
        http_query_events: [
            'event_id',
            'time_stamp',
            'session_id',
            'client_intf',
            'server_intf',
            'c_client_addr',
            's_client_addr',
            'c_server_addr',
            's_server_addr',
            'c_client_port',
            's_client_port',
            'c_server_port',
            's_server_port',
            'policy_id',
            'username',
            'hostname',
            'request_id',
            'method',
            'uri',
            'term',
            'host',
            'c2s_content_length',
            's2c_content_length',
            's2c_content_type',
            'blocked',
            'flagged'
        ],
        mail_addrs: [
            'time_stamp',
            'session_id',
            'server_intf',
            'c_client_addr',
            'c_server_addr',
            'c_client_port',
            'c_server_port',
            's_client_addr',
            's_server_addr',
            's_client_port',
            's_server_port',
            'policy_id',
            'username',
            'msg_id',
            'subject',
            'addr',
            'addr_name',
            'addr_kind',
            'hostname',
            'event_id',
            'sender',
            'virus_blocker_lite_clean',
            'virus_blocker_lite_name',
            'virus_blocker_clean',
            'virus_blocker_name',
            'spam_blocker_lite_score',
            'spam_blocker_lite_is_spam',
            'spam_blocker_lite_action',
            'spam_blocker_lite_tests_string',
            'spam_blocker_score',
            'spam_blocker_is_spam',
            'spam_blocker_action',
            'spam_blocker_tests_string',
            'phish_blocker_score',
            'phish_blocker_is_spam',
            'phish_blocker_tests_string',
            'phish_blocker_action'
        ],
        mail_msgs: [
            'time_stamp',
            'session_id',
            'server_intf',
            'c_client_addr',
            's_server_addr',
            'c_client_port',
            's_server_port',
            'policy_id',
            'username',
            'msg_id',
            'subject',
            'hostname',
            'event_id',
            'sender',
            'receiver',
            'virus_blocker_lite_clean',
            'virus_blocker_lite_name',
            'virus_blocker_clean',
            'virus_blocker_name',
            'spam_blocker_lite_score',
            'spam_blocker_lite_is_spam',
            'spam_blocker_lite_tests_string',
            'spam_blocker_lite_action',
            'spam_blocker_score',
            'spam_blocker_is_spam',
            'spam_blocker_tests_string',
            'spam_blocker_action',
            'phish_blocker_score',
            'phish_blocker_is_spam',
            'phish_blocker_tests_string',
            'phish_blocker_action',
        ],
        session_minutes: [
            'session_id',
            'time_stamp',
            'c2s_bytes',
            's2c_bytes',
            'start_time',
            'end_time',
            'bypassed',
            'entitled',
            'protocol',
            'icmp_type',
            'hostname',
            'username',
            'policy_id',
            'policy_rule_id',
            'local_addr',
            'remote_addr',
            'c_client_addr',
            'c_server_addr',
            'c_client_port',
            'c_server_port',
            's_client_addr',
            's_server_addr',
            's_client_port',
            's_server_port',
            'client_intf',
            'server_intf',
            'client_country',
            'client_latitude',
            'client_longitude',
            'server_country',
            'server_latitude',
            'server_longitude',
            'filter_prefix',
            'firewall_blocked',
            'firewall_flagged',
            'firewall_rule_index',
            'threat_prevention_blocked',
            'threat_prevention_flagged',
            'threat_prevention_reason',
            'threat_prevention_rule_id',
            'threat_prevention_client_reputation',
            'threat_prevention_client_categories',
            'threat_prevention_server_reputation',
            'threat_prevention_server_categories',
            'application_control_lite_protocol',
            'application_control_lite_blocked',
            'captive_portal_blocked',
            'captive_portal_rule_index',
            'application_control_application',
            'application_control_protochain',
            'application_control_category',
            'application_control_blocked',
            'application_control_flagged',
            'application_control_confidence',
            'application_control_ruleid',
            'application_control_detail',
            'bandwidth_control_priority',
            'bandwidth_control_rule',
            'ssl_inspector_ruleid',
            'ssl_inspector_status',
            'ssl_inspector_detail',
            'tags'
        ],
        sessions: [
            'session_id',
            'time_stamp',
            'end_time',
            'bypassed',
            'entitled',
            'protocol',
            'icmp_type',
            'hostname',
            'username',
            'policy_id',
            'policy_rule_id',
            'local_address',
            'remote_address',
            'c_client_addr',
            'c_server_addr',
            'c_client_port',
            'c_server_port',
            's_client_addr',
            's_server_addr',
            's_client_port',
            's_server_port',
            'client_intf',
            'server_intf',
            'client_country',
            'client_latitude',
            'client_longitude',
            'server_country',
            'server_latitude',
            'server_longitude',
            'c2p_bytes',
            'p2c_bytes',
            's2p_bytes',
            'p2s_bytes',
            'filter_prefix',
            'firewall_blocked',
            'firewall_flagged',
            'firewall_rule_index',
            'threat_prevention_blocked',
            'threat_prevention_flagged',
            'threat_prevention_reason',
            'threat_prevention_rule_id',
            'threat_prevention_client_reputation',
            'threat_prevention_client_categories',
            'threat_prevention_server_reputation',
            'threat_prevention_server_categories',
            'application_control_lite_protocol',
            'application_control_lite_blocked',
            'captive_portal_blocked',
            'captive_portal_rule_index',
            'application_control_application',
            'application_control_protochain',
            'application_control_category',
            'application_control_blocked',
            'application_control_flagged',
            'application_control_confidence',
            'application_control_ruleid',
            'application_control_detail',
            'bandwidth_control_priority',
            'bandwidth_control_rule',
            'ssl_inspector_ruleid',
            'ssl_inspector_status',
            'ssl_inspector_detail',
            'tags'
        ]
    },


    webReasons: {
        D: 'in Categories Block list'.t(),
        U: 'in Site Block list'.t(),
        T: 'in Search Term list'.t(),
        E: 'in File Block list'.t(),
        M: 'in MIME Types Block list'.t(),
        H: 'hostname is an IP address'.t(),
        I: 'in Site Pass list'.t(),
        R: 'referer in Site Pass list'.t(),
        C: 'in Clients Pass list'.t(),
        B: 'in Temporary Unblocked list'.t(),
        F: 'in Rules list'.t(),
        K: 'Kid-friendly redirect'.t(),
        default: 'no rule applied'.t()
    },

    webCategories: {
        0: 'Uncategorized',
        1: 'Real Estate',
        2: 'Computer and Internet Security',
        3: 'Financial Services',
        4: 'Business and Economy',
        5: 'Computer and Internet Info',
        6: 'Auctions',
        7: 'Shopping',
        8: 'Cult and Occult',
        9: 'Travel',
        10: 'Abused Drugs',
        11: 'Adult and Pornography',
        12: 'Home and Garden',
        13: 'Military',
        14: 'Social Networking',
        15: 'Dead Sites',
        16: 'Individual Stock Advice and Tools',
        17: 'Training and Tools',
        18: 'Dating',
        19: 'Sex Education',
        20: 'Religion',
        21: 'Entertainment and Arts',
        22: 'Personal sites and Blogs',
        23: 'Legal',
        24: 'Local Information',
        25: 'Streaming Media',
        26: 'Job Search',
        27: 'Gambling',
        28: 'Translation',
        29: 'Reference and Research',
        30: 'Shareware and Freeware',
        31: 'Peer to Peer',
        32: 'Marijuana',
        33: 'Hacking',
        34: 'Games',
        35: 'Philosophy and Political Advocacy',
        36: 'Weapons',
        37: 'Pay to Surf',
        38: 'Hunting and Fishing',
        39: 'Society',
        40: 'Educational Institutions',
        41: 'Online Greeting Cards',
        42: 'Sports',
        43: 'Swimsuits and Intimate Apparel',
        44: 'Questionable',
        45: 'Kids',
        46: 'Hate and Racism',
        47: 'Personal Storage',
        48: 'Violence',
        49: 'Keyloggers and Monitoring',
        50: 'Search Engines',
        51: 'Internet Portals',
        52: 'Web Advertisements',
        53: 'Cheating',
        54: 'Gross',
        55: 'Web-based Email',
        56: 'Malware Sites',
        57: 'Phishing and Other Frauds',
        58: 'Proxy Avoidance and Anonymizers',
        59: 'Spyware and Adware',
        60: 'Music',
        61: 'Government',
        62: 'Nudity',
        63: 'News and Media',
        64: 'Illegal',
        65: 'Content Delivery Networks',
        66: 'Internet Communications',
        67: 'Bot Nets',
        68: 'Abortion',
        69: 'Health and Medicine',
        71: 'SPAM URLs',
        74: 'Dynamically Generated Content',
        75: 'Parked Domains',
        76: 'Alcohol and Tobacco',
        78: 'Image and Video Search',
        79: 'Fashion and Beauty',
        80: 'Recreation and Hobbies',
        81: 'Motor Vehicles',
        82: 'Web Hosting'
    },

    protocols: {
        0: 'HOPOPT [0]',
        1: 'ICMP [1]',
        2: 'IGMP [2]',
        3: 'GGP [3]',
        4: 'IP-in-IP [4]',
        5: 'ST [5]',
        6: 'TCP [6]',
        7: 'CBT [7]',
        8: 'EGP [8]',
        9: 'IGP [9]',
        10: 'BBN-RCC-MON [10]',
        11: 'NVP-II [11]',
        12: 'PUP [12]',
        13: 'ARGUS [13]',
        14: 'EMCON [14]',
        15: 'XNET [15]',
        16: 'CHAOS [16]',
        17: 'UDP [17]',
        18: 'MUX [18]',
        19: 'DCN-MEAS [19]',
        20: 'HMP [20]',
        21: 'PRM [21]',
        22: 'XNS-IDP [22]',
        23: 'TRUNK-1 [23]',
        24: 'TRUNK-2 [24]',
        25: 'LEAF-1 [25]',
        26: 'LEAF-2 [26]',
        27: 'RDP [27]',
        28: 'IRTP [28]',
        29: 'ISO-TP4 [29]',
        30: 'NETBLT [30]',
        31: 'MFE-NSP [31]',
        32: 'MERIT-INP [32]',
        33: 'DCCP [33]',
        34: '3PC [34]',
        35: 'IDPR [35]',
        36: 'XTP [36]',
        37: 'DDP [37]',
        38: 'IDPR-CMTP [38]',
        39: 'TP++ [39]',
        40: 'IL [40]',
        41: 'IPv6 [41]',
        42: 'SDRP [42]',
        43: 'IPv6-Route [43]',
        44: 'IPv6-Frag [44]',
        45: 'IDRP [45]',
        46: 'RSVP [46]',
        47: 'GRE [47]',
        48: 'MHRP [48]',
        49: 'BNA [49]',
        50: 'ESP [50]',
        51: 'AH [51]',
        52: 'I-NLSP [52]',
        53: 'SWIPE [53]',
        54: 'NARP [54]',
        55: 'MOBILE [55]',
        56: 'TLSP [56]',
        57: 'SKIP [57]',
        58: 'IPv6-ICMP [58]',
        59: 'IPv6-NoNxt [59]',
        60: 'IPv6-Opts [60]',
        62: 'CFTP [62]',
        64: 'SAT-EXPAK [64]',
        65: 'KRYPTOLAN [65]',
        66: 'RVD [66]',
        67: 'IPPC [67]',
        69: 'SAT-MON [69]',
        70: 'VISA [70]',
        71: 'IPCU [71]',
        72: 'CPNX [72]',
        73: 'CPHB [73]',
        74: 'WSN [74]',
        75: 'PVP [75]',
        76: 'BR-SAT-MON [76]',
        77: 'SUN-ND [77]',
        78: 'WB-MON [78]',
        79: 'WB-EXPAK [79]',
        80: 'ISO-IP [80]',
        81: 'VMTP [81]',
        82: 'SECURE-VMTP [82]',
        83: 'VINES [83]',
        84: 'TTP [84]',
        85: 'NSFNET-IGP [85]',
        86: 'DGP [86]',
        87: 'TCF [87]',
        88: 'EIGRP [88]',
        89: 'OSPF [89]',
        90: 'Sprite-RPC [90]',
        91: 'LARP [91]',
        92: 'MTP [92]',
        93: 'AX.25 [93]',
        94: 'IPIP [94]',
        95: 'MICP [95]',
        96: 'SCC-SP [96]',
        97: 'ETHERIP [97]',
        98: 'ENCAP [98]',
        100: 'GMTP [100]',
        101: 'IFMP [101]',
        102: 'PNNI [102]',
        103: 'PIM [103]',
        104: 'ARIS [104]',
        105: 'SCPS [105]',
        106: 'QNX [106]',
        107: 'A/N [107]',
        108: 'IPComp [108]',
        109: 'SNP [109]',
        110: 'Compaq-Peer [110]',
        111: 'IPX-in-IP [111]',
        112: 'VRRP [112]',
        113: 'PGM [113]',
        115: 'L2TP [115]',
        116: 'DDX [116]',
        117: 'IATP [117]',
        118: 'STP [118]',
        119: 'SRP [119]',
        120: 'UTI [120]',
        121: 'SMP [121]',
        122: 'SM [122]',
        123: 'PTP [123]',
        124: 'IS-IS [124]',
        125: 'FIRE [125]',
        126: 'CRTP [126]',
        127: 'CRUDP [127]',
        128: 'SSCOPMCE [128]',
        129: 'IPLT [129]',
        130: 'SPS [130]',
        131: 'PIPE [131]',
        132: 'SCTP [132]',
        133: 'FC [133]',
        134: 'RSVP-E2E-IGNORE [134]',
        135: 'Mobility [135]',
        136: 'UDPLite [136]',
        137: 'MPLS-in-IP [137]',
        138: 'manet [138]',
        139: 'HIP [139]',
        140: 'Shim6 [140]',
        141: 'WESP [141]',
        142: 'ROHC [142]',
        default: 'Unknown'.t()
    },

    httpMethods: {
        'O': 'OPTIONS (O)',
        'G': 'GET (G)',
        'H': 'HEAD (H)',
        'P': 'POST (P)',
        'U': 'PUT (U)',
        'D': 'DELETE (D)',
        'T': 'TRACE (T)',
        'C': 'CONNECT (C)',
        'X': 'NON-STANDARD (X)'
    },

    emailActions: {
        'P': 'pass message'.t(),
        'M': 'mark message'.t(),
        'D': 'drop message'.t(),
        'B': 'block message'.t(),
        'Q': 'quarantine message'.t(),
        'S': 'pass safelist message'.t(),
        'Z': 'pass oversize message'.t(),
        'O': 'pass outbound message'.t(),
        'F': 'block message (scan failure)'.t(),
        'G': 'pass message (scan failure)'.t(),
        'Y': 'block message (greylist)'.t()
    },

    priorities: {
        0: '',
        1: 'Very High'.t(),
        2: 'High'.t(),
        3: 'Medium'.t(),
        4: 'Low'.t(),
        5: 'Limited'.t(),
        6: 'Limited More'.t(),
        7: 'Limited Severely'.t()
    },

    loginFailureReasons: {
        U: 'invalid username'.t(),
        P: 'invalid password'.t()
    },

    icmps: {
        0: 'Echo Reply'.t(),
        1: 'Unassigned'.t(),
        2: 'Unassigned'.t(),
        3: 'Destination Unreachable'.t(),
        4: 'Source Quench (Deprecated)'.t(),
        5: 'Redirect'.t(),
        6: 'Alternate Host Address (Deprecated)'.t(),
        7: 'Unassigned'.t(),
        8: 'Echo'.t(),
        9: 'Router Advertisement'.t(),
        10: 'Router Solicitation'.t(),
        11: 'Time Exceeded'.t(),
        12: 'Parameter Problem'.t(),
        13: 'Timestamp'.t(),
        14: 'Timestamp Reply'.t(),
        15: 'Information Request (Deprecated)'.t(),
        16: 'Information Reply (Deprecated)'.t(),
        17: 'Address Mask Request (Deprecated)'.t(),
        18: 'Address Mask Reply (Deprecated)'.t(),
        19: 'Reserved (for Security)'.t(),
        20: 'Reserved (for Robustness Experiment)'.t(),
        21: 'Reserved (for Robustness Experiment)'.t(),
        22: 'Reserved (for Robustness Experiment)'.t(),
        23: 'Reserved (for Robustness Experiment)'.t(),
        24: 'Reserved (for Robustness Experiment)'.t(),
        25: 'Reserved (for Robustness Experiment)'.t(),
        26: 'Reserved (for Robustness Experiment)'.t(),
        27: 'Reserved (for Robustness Experiment)'.t(),
        28: 'Reserved (for Robustness Experiment)'.t(),
        29: 'Reserved (for Robustness Experiment)'.t(),
        30: 'Traceroute (Deprecated)'.t(),
        31: 'Datagram Conversion Error (Deprecated)'.t(),
        32: 'Mobile Host Redirect (Deprecated)'.t(),
        33: 'IPv6 Where-Are-You (Deprecated)'.t(),
        34: 'IPv6 I-Am-Here (Deprecated)'.t(),
        35: 'Mobile Registration Request (Deprecated)'.t(),
        36: 'Mobile Registration Reply (Deprecated)'.t(),
        37: 'Domain Name Request (Deprecated)'.t(),
        38: 'Domain Name Reply (Deprecated)'.t(),
        39: 'SKIP (Deprecated)'.t(),
        40: 'Photuris'.t(),
        41:  'ICMP messages utilized by experimental mobility protocols'.t(),
        253: 'RFC3692-style Experiment 1'.t(),
        254: 'RFC3692-style Experiment 2'.t(),
        255: 'Reserved'.t()
    },

    countries: {
        XU: 'Unknown'.t(),
        XL: 'Local'.t(),
        AF: 'Afghanistan'.t(),
        AX: 'Aland Islands'.t(),
        AL: 'Albania'.t(),
        DZ: 'Algeria'.t(),
        AS: 'American Samoa'.t(),
        AD: 'Andorra'.t(),
        AO: 'Angola'.t(),
        AI: 'Anguilla'.t(),
        AQ: 'Antarctica'.t(),
        AG: 'Antigua and Barbuda'.t(),
        AR: 'Argentina'.t(),
        AM: 'Armenia'.t(),
        AW: 'Aruba'.t(),
        AU: 'Australia'.t(),
        AT: 'Austria'.t(),
        AZ: 'Azerbaijan'.t(),
        BS: 'Bahamas'.t(),
        BH: 'Bahrain'.t(),
        BD: 'Bangladesh'.t(),
        BB: 'Barbados'.t(),
        BY: 'Belarus'.t(),
        BE: 'Belgium'.t(),
        BZ: 'Belize'.t(),
        BJ: 'Benin'.t(),
        BM: 'Bermuda'.t(),
        BT: 'Bhutan'.t(),
        BO: 'Bolivia, Plurinational State of'.t(),
        BQ: 'Bonaire, Sint Eustatius and Saba'.t(),
        BA: 'Bosnia and Herzegovina'.t(),
        BW: 'Botswana'.t(),
        BV: 'Bouvet Island'.t(),
        BR: 'Brazil'.t(),
        IO: 'British Indian Ocean Territory'.t(),
        BN: 'Brunei Darussalam'.t(),
        BG: 'Bulgaria'.t(),
        BF: 'Burkina Faso'.t(),
        BI: 'Burundi'.t(),
        KH: 'Cambodia'.t(),
        CM: 'Cameroon'.t(),
        CA: 'Canada'.t(),
        CV: 'Cape Verde'.t(),
        KY: 'Cayman Islands'.t(),
        CF: 'Central African Republic'.t(),
        TD: 'Chad'.t(),
        CL: 'Chile'.t(),
        CN: 'China'.t(),
        CX: 'Christmas Island'.t(),
        CC: 'Cocos (Keeling) Islands'.t(),
        CO: 'Colombia'.t(),
        KM: 'Comoros'.t(),
        CG: 'Congo'.t(),
        CD: 'Congo, the Democratic Republic of the'.t(),
        CK: 'Cook Islands'.t(),
        CR: 'Costa Rica'.t(),
        CI: "Cote d'Ivoire".t(),
        HR: 'Croatia'.t(),
        CU: 'Cuba'.t(),
        CW: 'Curacao'.t(),
        CY: 'Cyprus'.t(),
        CZ: 'Czech Republic'.t(),
        DK: 'Denmark'.t(),
        DJ: 'Djibouti'.t(),
        DM: 'Dominica'.t(),
        DO: 'Dominican Republic'.t(),
        EC: 'Ecuador'.t(),
        EG: 'Egypt'.t(),
        SV: 'El Salvador'.t(),
        GQ: 'Equatorial Guinea'.t(),
        ER: 'Eritrea'.t(),
        EE: 'Estonia'.t(),
        ET: 'Ethiopia'.t(),
        FK: 'Falkland Islands (Malvinas)'.t(),
        FO: 'Faroe Islands'.t(),
        FJ: 'Fiji'.t(),
        FI: 'Finland'.t(),
        FR: 'France'.t(),
        GF: 'French Guiana'.t(),
        PF: 'French Polynesia'.t(),
        TF: 'French Southern Territories'.t(),
        GA: 'Gabon'.t(),
        GM: 'Gambia'.t(),
        GE: 'Georgia'.t(),
        DE: 'Germany'.t(),
        GH: 'Ghana'.t(),
        GI: 'Gibraltar'.t(),
        GR: 'Greece'.t(),
        GL: 'Greenland'.t(),
        GD: 'Grenada'.t(),
        GP: 'Guadeloupe'.t(),
        GU: 'Guam'.t(),
        GT: 'Guatemala'.t(),
        GG: 'Guernsey'.t(),
        GN: 'Guinea'.t(),
        GW: 'Guinea-Bissau'.t(),
        GY: 'Guyana'.t(),
        HT: 'Haiti'.t(),
        HM: 'Heard Island and McDonald Islands'.t(),
        VA: 'Holy See (Vatican City State)'.t(),
        HN: 'Honduras'.t(),
        HK: 'Hong Kong'.t(),
        HU: 'Hungary'.t(),
        IS: 'Iceland'.t(),
        IN: 'India'.t(),
        ID: 'Indonesia'.t(),
        IR: 'Iran, Islamic Republic of'.t(),
        IQ: 'Iraq'.t(),
        IE: 'Ireland'.t(),
        IM: 'Isle of Man'.t(),
        IL: 'Israel'.t(),
        IT: 'Italy'.t(),
        JM: 'Jamaica'.t(),
        JP: 'Japan'.t(),
        JE: 'Jersey'.t(),
        JO: 'Jordan'.t(),
        KZ: 'Kazakhstan'.t(),
        KE: 'Kenya'.t(),
        KI: 'Kiribati'.t(),
        KP: "Korea, Democratic People's Republic of".t(),
        KR: 'Korea, Republic of'.t(),
        KW: 'Kuwait'.t(),
        KG: 'Kyrgyzstan'.t(),
        LA: "Lao People's Democratic Republic".t(),
        LV: 'Latvia'.t(),
        LB: 'Lebanon'.t(),
        LS: 'Lesotho'.t(),
        LR: 'Liberia'.t(),
        LY: 'Libya'.t(),
        LI: 'Liechtenstein'.t(),
        LT: 'Lithuania'.t(),
        LU: 'Luxembourg'.t(),
        MO: 'Macao'.t(),
        MK: 'Macedonia, the Former Yugoslav Republic of'.t(),
        MG: 'Madagascar'.t(),
        MW: 'Malawi'.t(),
        MY: 'Malaysia'.t(),
        MV: 'Maldives'.t(),
        ML: 'Mali'.t(),
        MT: 'Malta'.t(),
        MH: 'Marshall Islands'.t(),
        MQ: 'Martinique'.t(),
        MR: 'Mauritania'.t(),
        MU: 'Mauritius'.t(),
        YT: 'Mayotte'.t(),
        MX: 'Mexico'.t(),
        FM: 'Micronesia, Federated States of'.t(),
        MD: 'Moldova, Republic of'.t(),
        MC: 'Monaco'.t(),
        MN: 'Mongolia'.t(),
        ME: 'Montenegro'.t(),
        MS: 'Montserrat'.t(),
        MA: 'Morocco'.t(),
        MZ: 'Mozambique'.t(),
        MM: 'Myanmar'.t(),
        NA: 'Namibia'.t(),
        NR: 'Nauru'.t(),
        NP: 'Nepal'.t(),
        NL: 'Netherlands'.t(),
        NC: 'New Caledonia'.t(),
        NZ: 'New Zealand'.t(),
        NI: 'Nicaragua'.t(),
        NE: 'Niger'.t(),
        NG: 'Nigeria'.t(),
        NU: 'Niue'.t(),
        NF: 'Norfolk Island'.t(),
        MP: 'Northern Mariana Islands'.t(),
        NO: 'Norway'.t(),
        OM: 'Oman'.t(),
        PK: 'Pakistan'.t(),
        PW: 'Palau'.t(),
        PS: 'Palestine, State of'.t(),
        PA: 'Panama'.t(),
        PG: 'Papua New Guinea'.t(),
        PY: 'Paraguay'.t(),
        PE: 'Peru'.t(),
        PH: 'Philippines'.t(),
        PN: 'Pitcairn'.t(),
        PL: 'Poland'.t(),
        PT: 'Portugal'.t(),
        PR: 'Puerto Rico'.t(),
        QA: 'Qatar'.t(),
        RE: 'Reunion'.t(),
        RO: 'Romania'.t(),
        RU: 'Russian Federation'.t(),
        RW: 'Rwanda'.t(),
        BL: 'Saint Barthelemy'.t(),
        SH: 'Saint Helena, Ascension and Tristan da Cunha'.t(),
        KN: 'Saint Kitts and Nevis'.t(),
        LC: 'Saint Lucia'.t(),
        MF: 'Saint Martin (French part)'.t(),
        PM: 'Saint Pierre and Miquelon'.t(),
        VC: 'Saint Vincent and the Grenadines'.t(),
        WS: 'Samoa'.t(),
        SM: 'San Marino'.t(),
        ST: 'Sao Tome and Principe'.t(),
        SA: 'Saudi Arabia'.t(),
        SN: 'Senegal'.t(),
        RS: 'Serbia'.t(),
        SC: 'Seychelles'.t(),
        SL: 'Sierra Leone'.t(),
        SG: 'Singapore'.t(),
        SX: 'Sint Maarten (Dutch part)'.t(),
        SK: 'Slovakia'.t(),
        SI: 'Slovenia'.t(),
        SB: 'Solomon Islands'.t(),
        SO: 'Somalia'.t(),
        ZA: 'South Africa'.t(),
        GS: 'South Georgia and the South Sandwich Islands'.t(),
        SS: 'South Sudan'.t(),
        ES: 'Spain'.t(),
        LK: 'Sri Lanka'.t(),
        SD: 'Sudan'.t(),
        SR: 'Suriname'.t(),
        SJ: 'Svalbard and Jan Mayen'.t(),
        SZ: 'Swaziland'.t(),
        SE: 'Sweden'.t(),
        CH: 'Switzerland'.t(),
        SY: 'Syrian Arab Republic'.t(),
        TW: 'Taiwan, Province of China'.t(),
        TJ: 'Tajikistan'.t(),
        TZ: 'Tanzania, United Republic of'.t(),
        TH: 'Thailand'.t(),
        TL: 'Timor-Leste'.t(),
        TG: 'Togo'.t(),
        TK: 'Tokelau'.t(),
        TO: 'Tonga'.t(),
        TT: 'Trinidad and Tobago'.t(),
        TN: 'Tunisia'.t(),
        TR: 'Turkey'.t(),
        TM: 'Turkmenistan'.t(),
        TC: 'Turks and Caicos Islands'.t(),
        TV: 'Tuvalu'.t(),
        UG: 'Uganda'.t(),
        UA: 'Ukraine'.t(),
        AE: 'United Arab Emirates'.t(),
        GB: 'United Kingdom'.t(),
        US: 'United States'.t(),
        UM: 'United States Minor Outlying Islands'.t(),
        UY: 'Uruguay'.t(),
        UZ: 'Uzbekistan'.t(),
        VU: 'Vanuatu'.t(),
        VE: 'Venezuela, Bolivarian Republic of'.t(),
        VN: 'Viet Nam'.t(),
        VG: 'Virgin Islands, British'.t(),
        VI: 'Virgin Islands, U.S.'.t(),
        WF: 'Wallis and Futuna'.t(),
        EH: 'Western Sahara'.t(),
        YE: 'Yemen'.t(),
        ZM: 'Zambia'.t(),
        ZW: 'Zimbabwe'.t(),
    },
});
